<?xml encoding="ISO-8859-1" version="1.0"?>
<!-- OPML generated by OPML Editor v0.75 on 10/30/15; 12:28:00 PM -->
<opml version="2.0">
	<head>
		<title>river4.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="river4.js">
		<outline text="var myVersion = &quot;0.122a&quot;, myProductName = &quot;River4&quot;; "></outline>
		<outline text=""></outline>
		<outline text="/*  The MIT License (MIT)">
			<outline text="Copyright (c) 2014-2015 Dave Winer"></outline>
			<outline text=""></outline>
			<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"></outline>
			<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"></outline>
			<outline text="in the Software without restriction, including without limitation the rights"></outline>
			<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"></outline>
			<outline text="copies of the Software, and to permit persons to whom the Software is"></outline>
			<outline text="furnished to do so, subject to the following conditions:"></outline>
			<outline text=""></outline>
			<outline text="The above copyright notice and this permission notice shall be included in all"></outline>
			<outline text="copies or substantial portions of the Software."></outline>
			<outline text=""></outline>
			<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"></outline>
			<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"></outline>
			<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"></outline>
			<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"></outline>
			<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"></outline>
			<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"></outline>
			<outline text="SOFTWARE."></outline>
			<outline text=""></outline>
			<outline text="structured listing: http://scripting.com/listings/river4.html"></outline>
			<outline text="*/"></outline>
			</outline>
		<outline text=""></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="var http = require (&quot;http&quot;); "></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="var https = require (&quot;https&quot;);"></outline>
		<outline text="var AWS = require (&quot;aws-sdk&quot;);"></outline>
		<outline text="var s3 = new AWS.S3 ();"></outline>
		<outline text="var md5 = require (&quot;MD5&quot;);"></outline>
		<outline text="var OpmlParser = require (&quot;opmlparser&quot;);"></outline>
		<outline text="var FeedParser = require (&quot;feedparser&quot;);"></outline>
		<outline text="var request = require (&quot;request&quot;);"></outline>
		<outline created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074" text="var urlpack = require (&quot;url&quot;);"></outline>
		<outline text="var util = require (&quot;util&quot;);"></outline>
		<outline text="var fs = require (&quot;fs&quot;);"></outline>
		<outline text="var qs = require (&quot;querystring&quot;);"></outline>
		<outline text="var utils = require (&quot;./lib/utils.js&quot;); //8/13/15 by DW"></outline>
		<outline text=""></outline>
		<outline text="var fspath = process.env.fspath; //9/24/14 by DW"></outline>
		<outline text="var remotePassword = process.env.password; //12/4/14 by DW"></outline>
		<outline isComment="true" text="var flWatchForQuitFile = false, fnameQuitFile = &quot;quitnow.txt&quot;; //8/20/15 by DW -- can only be sent through config.json"></outline>
		<outline text="var flWatchAppDateChange = false, fnameApp = &quot;river4.js&quot;, origAppModDate; //8/21/15 by DW -- can only be sent through config.json"></outline>
		<outline text="    "></outline>
		<outline text="var s3path = process.env.s3path; "></outline>
		<outline text="var s3UserListsPath; "></outline>
		<outline text="var s3UserRiversPath; "></outline>
		<outline text="var s3PrefsAndStatsPath;"></outline>
		<outline text="var s3LocalStoragePath; //6/22/15 by DW"></outline>
		<outline text="var s3FeedsArrayPath;"></outline>
		<outline text="var s3RiversArrayPath;"></outline>
		<outline text="var s3FeedsInListsPath;"></outline>
		<outline text="var s3FeedsDataFolder;"></outline>
		<outline text="var s3CalendarDataFolder;"></outline>
		<outline text="var s3ListsDataFolder;"></outline>
		<outline text="var s3BackupsFolder; //12/4/14 by DW"></outline>
		<outline text="var s3IndexFile;"></outline>
		<outline text=""></outline>
		<outline text="var myPort = Number (process.env.PORT || 1337);"></outline>
		<outline text=""></outline>
		<outline text="var urlIndexSource = &quot;http://fargo.io/code/river4/river4homepage.html&quot;;"></outline>
		<outline text="var urlDashboardSource = &quot;http://fargo.io/code/river4/dashboard.html&quot;;"></outline>
		<outline text="var urlServerHomePageSource = &quot;http://fargo.io/code/river4/serverhomepage.html&quot;; //what you get when you go to / on the server"></outline>
		<outline text="var urlFavicon = &quot;http://fargo.io/favicon.ico&quot;; //7/19/15 by DW"></outline>
		<outline text=""></outline>
		<outline text="var whenServerStart = new Date ();"></outline>
		<outline text="var ct = 0, secsLastInit = 0;"></outline>
		<outline text=""></outline>
		<outline text="var serverData = {">
			<outline text="prefs: {">
				<outline text="enabled: true,"></outline>
				<outline text="ctMinutesBetwBuilds: 15,"></outline>
				<outline text="maxConsecutiveFeedErrors: 100,"></outline>
				<outline text="maxThreads: 10,"></outline>
				<outline text="ctReadsPerSecond: 2,"></outline>
				<outline text="maxRiverItems: 100,"></outline>
				<outline isComment="true" text="nameLocalTimezone: &quot;Eastern&quot;,"></outline>
				<outline text="maxBodyLength: 280,"></outline>
				<outline text="flSkipDuplicateTitles: true,"></outline>
				<outline text="flWriteItemsToFiles: false, //debugging -- 5/30/14 by DW"></outline>
				<outline text="flRequestCloudNotify: true //6/4/15 by DW"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="stats: {">
				<outline text="aggregator: &quot;&quot;,"></outline>
				<outline text="ctHoursServerUp: 0,"></outline>
				<outline text="ctFeedReads: 0,"></outline>
				<outline text="ctFeedsReadThisScan: 0,"></outline>
				<outline text="ctFeedReadsLastHour: 0,"></outline>
				<outline text="ctFeedReadsThisRun: 0,"></outline>
				<outline text="ctReadsSkipped: 0,"></outline>
				<outline text="lastFeedRead: &quot;&quot;, "></outline>
				<outline text="whenLastFeedRead: new Date (0), "></outline>
				<outline text="secsSinceLastFeedRead: 0,"></outline>
				<outline text="serialnum: 0, //each new story gets a number"></outline>
				<outline text="ctStoriesAdded: 0,"></outline>
				<outline text="ctStoriesAddedThisRun: 0,"></outline>
				<outline text="whenLastStoryAdded: new Date (0),"></outline>
				<outline text="ctHits: 0, ctHitsToday: 0, ctHitsThisRun: 0,"></outline>
				<outline text="ctMinutes: 0,"></outline>
				<outline text="ctScans: 0,"></outline>
				<outline text="whenLastScanBegin: new Date (0), "></outline>
				<outline text="whenLastScanEnd: new Date (0),"></outline>
				<outline text="flScanningNow: false,"></outline>
				<outline text="ctRiverSaves: 0,"></outline>
				<outline text="whenLastRiverSave: new Date (0),"></outline>
				<outline text="ctRiverSaveErrors: 0,"></outline>
				<outline text="whenLastRiverSaveError: new Date (0),"></outline>
				<outline text="ctActiveThreads: 0,"></outline>
				<outline text="ctHttpSockets: 0,"></outline>
				<outline text="whenLastBuild: new Date (),"></outline>
				<outline text="ctListFolderReads: 0,"></outline>
				<outline text="whenLastListFolderRead: new Date (0),"></outline>
				<outline text="listNames: new Array (),"></outline>
				<outline text="ctRiverJsonSaves: 0,"></outline>
				<outline text="whenLastRiverJsonSave: new Date (0), "></outline>
				<outline text="ctListSaves: 0, "></outline>
				<outline text="whenLastListSave: new Date (0), "></outline>
				<outline text="backupSerialnum: 0, "></outline>
				<outline text="ctRssCloudUpdates: 0,"></outline>
				<outline text="whenLastRssCloudUpdate: new Date (0),"></outline>
				<outline text="ctLocalStorageWrites: 0,"></outline>
				<outline text="whenLastLocalStorageWrite: new Date (0)"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="flags: []"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="var flHaveServerData = false; "></outline>
		<outline text=""></outline>
		<outline text="var feedsArray = [], flFeedsArrayDirty = false;"></outline>
		<outline text=""></outline>
		<outline text="var feedsInLists = {}, flFeedsInListsDirty = false; //5/30/14 by DW"></outline>
		<outline text=""></outline>
		<outline text="var todaysRiver = [], dayRiverCovers = new Date (), flRiverDirty = false;"></outline>
		<outline text=""></outline>
		<outline text="var whenLastEveryMinute = new Date ();"></outline>
		<outline text="var whenLastRiversBuild = new Date (); //8/6/14 by DW"></outline>
		<outline text=""></outline>
		<outline text="var fnameConfig = &quot;config.json&quot;; //5/9/15 by DW"></outline>
		<outline text="var appConfig; //6/4/15 by DW -- the contents of config.json available to all code"></outline>
		<outline text=""></outline>
		<outline text="var addToRiverCallbacksFolder = &quot;callbacks/addToRiver/&quot;; //6/19/15 by DW"></outline>
		<outline text="var flScheduledEveryMinute = false; //8/22/15 by DW"></outline>
		<outline text=""></outline>
		<outline isComment="true" text="var flScanningNow = false;"></outline>
		<outline text=""></outline>
		<outline text=""></outline>
		<outline text="[[http://fargo.io/code/node/shared/s3.js]]"></outline>
		<outline isComment="true" text="[[http://fargo.io/code/node/shared/utils.js]]"></outline>
		<outline text="[[http://fargo.io/code/node/shared/queue.js]]"></outline>
		<outline text="[[http://fargo.io/code/river4/riverbuilder.js]]"></outline>
		<outline text="[[http://fargo.io/code/node/shared/fs.js]] "></outline>
		<outline text="[[http://fargo.io/code/river4/rivercallbacks.js]]"></outline>
		<outline text=""></outline>
		<outline text=""></outline>
		<outline text="//storage routines -- 9/24/14 by DW">
			<outline text="function stNewObject (path, data, type, acl, callback, metadata) {">
				<outline text="if (fspath != undefined) {">
					<outline text="fsNewObject (path, data, type, acl, callback, metadata);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="s3NewObject (path, data, type, acl, callback, metadata);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function stGetObject (path, callback) {">
				<outline text="if (fspath != undefined) {">
					<outline text="fsGetObject (path, callback);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="s3GetObject (path, callback);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function stListObjects (path, callback) {">
				<outline text="if (fspath != undefined) {">
					<outline text="fsSureFilePath (path, function () { //7/19/15 by DW -- create the folder if it doesn't exist">
						<outline text="fsListObjects (path, callback);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="s3ListObjects (path, callback);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			</outline>
		<outline text=""></outline>
		<outline text="function todaysRiverChanged () { //6/21/15 by DW -- callback scripts, call this to be sure your changes get saved">
			<outline text="flRiverDirty = true;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035" text="function httpReadUrl (url, callback) { //12/1/14 by DW">
			<outline text="request (url, function (error, response, body) {">
				<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
					<outline text="callback (body) "></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038" text="}"></outline>
			</outline>
		<outline text="function parseJson (jsontext, s3Path) {">
			<outline text="var obj;"></outline>
			<outline created="Sun, 08 Dec 2013 20:57:52 GMT" pgfnum="33332" text="try {">
				<outline text="return (JSON.parse (jsontext));"></outline>
				<outline created="Sun, 08 Dec 2013 20:57:57 GMT" pgfnum="33333" text="}"></outline>
				</outline>
			<outline created="Sun, 08 Dec 2013 20:58:01 GMT" pgfnum="33334" text="catch (err) {">
				<outline text="if (s3Path == undefined) {">
					<outline created="Mon, 25 Nov 2013 17:11:59 GMT" pgfnum="32255" text="console.log (&quot;parseJson, error: &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline created="Mon, 25 Nov 2013 17:11:59 GMT" pgfnum="32255" text="console.log (&quot;parseJson, error with S3 file: &quot; + s3Path + &quot;, &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text=""></outline>
				<outline text="return (new Object ());"></outline>
				<outline created="Sun, 08 Dec 2013 20:58:04 GMT" pgfnum="33335" text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function countHttpSockets () {">
			<outline isComment="true" text="Changes">
				<outline text="5/30/14; 8:32:21 AM by DW">
					<outline text="Return the number of open HTTP sockets. Following the advice in this thread -- https://gist.github.com/Lukewh/3898463"></outline>
					</outline>
				</outline>
			<outline text="var ct = Object.keys (http.globalAgent.requests).length;"></outline>
			<outline text="if (ct == undefined) {">
				<outline text="ct = 0;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (ct);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadTodaysRiver (callback) {">
			<outline text="var s3path = getCalendarPath (dayRiverCovers);"></outline>
			<outline isComment="true" text="console.log (&quot;loadTodaysRiver: &quot; + s3path);"></outline>
			<outline text="stGetObject (s3path, function (error, data) {">
				<outline text="if (!error) {">
					<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="todaysRiver = parseJson (data.Body, s3path);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveTodaysRiver (callback) {">
			<outline text="var now = new Date ();"></outline>
			<outline text="console.log (&quot;saveTodaysRiver: &quot; + getCalendarPath (dayRiverCovers));"></outline>
			<outline text="stNewObject (getCalendarPath (dayRiverCovers), utils.jsonStringify (todaysRiver, true), &quot;application/json&quot;, s3defaultAcl, function (error, data) {">
				<outline text="serverData.stats.ctRiverSaves++;"></outline>
				<outline text="serverData.stats.whenLastRiverSave = now;"></outline>
				<outline text="if (error) { //4/21/15 by DW -- we were counting errors incorrectly">
					<outline text="serverData.stats.ctRiverSaveErrors++;"></outline>
					<outline text="serverData.stats.whenLastRiverSaveError = now;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="flRiverDirty = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function checkRiverRollover () { ">
			<outline isComment="true" text="Changes">
				<outline text="6/20/15; 9:21:35 PM by DW">
					<outline text="Only roll if it's been at least a minute since the last item was added to the river. Want to be sure all the callbacks have completed. "></outline>
					</outline>
				</outline>
			<outline text="var now = new Date ();"></outline>
			<outline text="function roll () {">
				<outline text="todaysRiver = new Array (); //clear it out"></outline>
				<outline text="dayRiverCovers = now;"></outline>
				<outline text="serverData.stats.ctHitsToday = 0;"></outline>
				<outline text="saveTodaysRiver (); //4/21/15 by DW -- initialize empty river"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (utils.secondsSince (serverData.stats.whenLastStoryAdded) &gt;= 60) {">
				<outline text="if (!utils.sameDay (now, dayRiverCovers)) { //rollover">
					<outline text="if (flRiverDirty) {">
						<outline text="saveTodaysRiver (roll);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="roll ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function addToRiver (urlfeed, itemFromParser, callback) {">
			<outline isComment="true" text="Changes">
				<outline text="6/7/15; 11:25:27 AM by DW">
					<outline text="We now record the time/date when we added the item to the river. "></outline>
					</outline>
				<outline text="7/16/14; 4:48:02 PM by DW">
					<outline text="Copy source:outline if present into the river."></outline>
					</outline>
				<outline text="5/30/14; 11:03:53 AM by DW">
					<outline text="Add support for enclosures. Remove ugly code for finding permalinks, Dan added it to the feedparser package. ">
						<outline text="https://github.com/danmactough/node-feedparser#list-of-article-properties"></outline>
						</outline>
					</outline>
				<outline text="5/28/14; 10:58:32 AM by DW">
					<outline text="Add an id attribute for each river item."></outline>
					</outline>
				<outline text="5/24/14; 11:35:27 AM by DW">
					<outline text="Strip markup everywhere. We don't do markup in rivers. Sorry. "></outline>
					</outline>
				<outline isComment="true" text="5/23/14; 4:47:33 PM by DW">
					<outline text="Set up these fields in each river element">
						<outline text="body --  -- description"></outline>
						<outline text="comments -- comments"></outline>
						<outline text="description -- description"></outline>
						<outline text="feedUrl -- (passed in as argument)"></outline>
						<outline text="link  -- link"></outline>
						<outline text="permalink -- ??"></outline>
						<outline text="pubdate -- pubDate (if null, now)"></outline>
						<outline text="title -- title"></outline>
						</outline>
					<outline text="json.compile (tcp.httpreadurl (&quot;https://s3.amazonaws.com/tmp.fargo.io/river4/data/feeds/scripting.com%3Arss.xml/items/001.json&quot;), @scratchpad.jstruct); edit (@scratchpad.jstruct)">
						<outline isComment="true" text="@[&quot;Macintosh HD:Users:davewiner:Desktop:OPML:Guest Databases:apps:Tools:river3.root&quot;].river3Suite.newItem"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="json.compile (tcp.httpreadurl (&quot;https://s3.amazonaws.com/tmp.fargo.io/river4/data/feeds/www.npr.org%3Arss%3Apodcast.php%3Fid%3D510053/items/008.json&quot;), @scratchpad.jstruct); edit (@scratchpad.jstruct)">
						<outline isComment="true" text="@scratchpad.jstruct"></outline>
						</outline>
					<outline text=""></outline>
					<outline text=""></outline>
					</outline>
				</outline>
			<outline text="var now = new Date (), item = new Object ();"></outline>
			<outline text="//copy selected elements from the object from feedparser, into the item for the river">
				<outline text="function convertOutline (jstruct) { //7/16/14 by DW">
					<outline text="var theNewOutline = {}, atts, subs;"></outline>
					<outline text="if (jstruct [&quot;source:outline&quot;] != undefined) {">
						<outline text="if (jstruct [&quot;@&quot;] != undefined) {">
							<outline text="atts = jstruct [&quot;@&quot;];"></outline>
							<outline text="subs = jstruct [&quot;source:outline&quot;];"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="atts = jstruct [&quot;source:outline&quot;] [&quot;@&quot;];"></outline>
							<outline text="subs = jstruct [&quot;source:outline&quot;] [&quot;source:outline&quot;];"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="atts = jstruct [&quot;@&quot;];"></outline>
						<outline text="subs = undefined;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="for (var x in atts) {">
						<outline text="theNewOutline [x] = atts [x];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (subs != undefined) {">
						<outline text="theNewOutline.subs = [];"></outline>
						<outline text="if (subs instanceof Array) {">
							<outline text="for (var i = 0; i &lt; subs.length; i++) {">
								<outline text="theNewOutline.subs [i] = convertOutline (subs [i]);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="theNewOutline.subs = [];"></outline>
							<outline text="theNewOutline.subs [0] = {};"></outline>
							<outline text="for (var x in subs [&quot;@&quot;]) {">
								<outline text="theNewOutline.subs [0] [x] = subs [&quot;@&quot;] [x];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline isComment="true" text="theNewOutline.subs [0] = subs;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (theNewOutline);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function newConvertOutline (jstruct) { //10/16/14 by DW">
					<outline isComment="true" text="Changes">
						<outline text="10/16/14; 1:22:05 PM by DW">
							<outline text="The previous version of this routine stopped working. So I wrote this in a testbed, and it works. It appears the new structure generated by FeedParser is simpler than the old one. Not sure when it changed. This is scary stuff. I'd like for this stuff *not* to change, because this is boiler-room code. I've sent an email to Dan to inquire about any possible changes. I should review their change notes (will do).">
								<outline text="https://github.com/danmactough/node-feedparser"></outline>
								</outline>
							</outline>
						</outline>
					<outline text="var theNewOutline = {};"></outline>
					<outline text="if (jstruct [&quot;@&quot;] != undefined) {">
						<outline text="utils.copyScalars (jstruct [&quot;@&quot;], theNewOutline);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (jstruct [&quot;source:outline&quot;] != undefined) {">
						<outline text="if (jstruct [&quot;source:outline&quot;] instanceof Array) {">
							<outline text="var theArray = jstruct [&quot;source:outline&quot;];"></outline>
							<outline text="theNewOutline.subs = [];"></outline>
							<outline text="for (var i = 0; i &lt; theArray.length; i++) {">
								<outline text="theNewOutline.subs [theNewOutline.subs.length] = newConvertOutline (theArray [i]);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="theNewOutline.subs = [">
								<outline text="newConvertOutline (jstruct [&quot;source:outline&quot;])"></outline>
								<outline text="];"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (theNewOutline);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function getString (s) {">
					<outline text="if (s == null) {">
						<outline text="s = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (utils.stripMarkup (s));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function getDate (d) {">
					<outline text="if (d == null) {">
						<outline text="d = now;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (new Date (d))"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="item.title = getString (itemFromParser.title);"></outline>
				<outline text="item.link = getString (itemFromParser.link);"></outline>
				<outline text="//description">
					<outline text="item.description = utils.trimWhitespace (getString (itemFromParser.description));"></outline>
					<outline text="if (item.description.length &gt; serverData.prefs.maxBodyLength) {">
						<outline text="item.description = utils.trimWhitespace (utils.maxStringLength (item.description, serverData.prefs.maxBodyLength));"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//permalink -- updated 5/30/14 by DW">
					<outline text="if (itemFromParser.permalink == undefined) {">
						<outline text="item.permalink = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="item.permalink = itemFromParser.permalink;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline isComment="true" text="//old code">
						<outline text="var fluselink = false;"></outline>
						<outline text="try {">
							<outline text="if (itemFromParser [&quot;rss:guid&quot;] != null) {">
								<outline text="var permalinkatt = itemFromParser [&quot;rss:guid&quot;] [&quot;@&quot;] [&quot;ispermalink&quot;];"></outline>
								<outline text="if (permalinkatt != undefined) { //it was specified">
									<outline text="if (permalinkatt.toString () != &quot;true&quot;) {">
										<outline text="if (item.link.length &gt; 0) {">
											<outline text="fluselink = true;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="catch (ignore) {">
							<outline text="}"></outline>
							</outline>
						<outline text="item.permalink =  (fluselink) ? item.link : getString (itemFromParser.guid);"></outline>
						</outline>
					</outline>
				<outline text="//enclosure -- 5/30/14 by DW">
					<outline text="if (itemFromParser.enclosures != undefined) { //it's an array, we want the first one">
						<outline text="item.enclosure = itemFromParser.enclosures [0];"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//source:outline -- 7/16/14 by DW">
					<outline text="if (itemFromParser [&quot;source:outline&quot;] != undefined) { //they're using a cool feature! :-)">
						<outline text="item.outline = newConvertOutline (itemFromParser [&quot;source:outline&quot;]);"></outline>
						<outline isComment="true" text="console.log (&quot;addToRiver: outline == &quot; + utils.jsonStringify (item.outline, true)); "></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="item.pubdate = getDate (itemFromParser.pubDate);"></outline>
				<outline text="item.comments = getString (itemFromParser.comments);"></outline>
				<outline text="item.feedUrl = urlfeed;"></outline>
				<outline text="item.when = now; //6/7/15 by DW"></outline>
				<outline text="item.aggregator = myProductName + &quot; v&quot; + myVersion;"></outline>
				<outline text="item.id = serverData.stats.serialnum++; //5/28/14 by DW"></outline>
				</outline>
			<outline text="todaysRiver [todaysRiver.length] = item;"></outline>
			<outline text="flRiverDirty = true;"></outline>
			<outline text="//stats">
				<outline text="serverData.stats.ctStoriesAdded++;"></outline>
				<outline text="serverData.stats.ctStoriesAddedThisRun++;"></outline>
				<outline text="serverData.stats.whenLastStoryAdded = now;"></outline>
				<outline text="serverData.stats.lastStoryAdded = item;"></outline>
				</outline>
			<outline text="//show in console">
				<outline text="var consolemsg = itemFromParser.title;"></outline>
				<outline text="if (consolemsg == null) {">
					<outline text="consolemsg = utils.maxStringLength (utils.stripMarkup (itemFromParser.description), 80);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="console.log (&quot;***addToRiver: &quot; + consolemsg);"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="callAddToRiverCallbacks (urlfeed, itemFromParser, todaysRiver [todaysRiver.length - 1]); //6/19/15 by DW"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function loadServerData (callback) {">
			<outline isComment="true" text="console.log (&quot;loadServerData: &quot; + s3PrefsAndStatsPath);"></outline>
			<outline text="stGetObject (s3PrefsAndStatsPath, function (error, data) {">
				<outline text="if (error) {">
					<outline text="if (!utils.beginsWith (error.message, &quot;ENOENT&quot;)) { //7/19/15 by DW">
						<outline text="console.log (&quot;loadServerData: error == &quot; + error.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="var oldServerData = parseJson (data.Body, s3PrefsAndStatsPath);"></outline>
					<outline created="Sun, 27 Apr 2014 18:34:38 GMT" pgfnum="40531" text="for (var x in oldServerData.prefs) { ">
						<outline created="Tue, 05 Nov 2013 16:12:39 GMT" pgfnum="30856" text="serverData.prefs [x] = oldServerData.prefs [x];"></outline>
						<outline created="Sun, 27 Apr 2014 18:36:17 GMT" pgfnum="40538" text="}"></outline>
						</outline>
					<outline created="Sun, 27 Apr 2014 18:34:38 GMT" pgfnum="40531" text="for (var x in oldServerData.stats) { ">
						<outline created="Tue, 05 Nov 2013 16:12:39 GMT" pgfnum="30856" text="serverData.stats [x] = oldServerData.stats [x];"></outline>
						<outline created="Sun, 27 Apr 2014 18:36:17 GMT" pgfnum="40538" text="}"></outline>
						</outline>
					<outline text="serverData.lists = oldServerData.lists;"></outline>
					<outline text="serverData.flags = oldServerData.flags;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="serverData.stats.aggregator = myProductName + &quot; v&quot; + myVersion;"></outline>
				<outline text="serverData.stats.whenServerStart = new Date ().toLocaleString ();"></outline>
				<outline text="serverData.stats.ctFeedReadsThisRun = 0;"></outline>
				<outline text="serverData.stats.ctStoriesAddedThisRun = 0;"></outline>
				<outline text="serverData.stats.ctHitsThisRun = 0;"></outline>
				<outline created="Mon, 28 Apr 2014 16:36:47 GMT" pgfnum="40619" text="serverData.stats.ctServerStarts++;"></outline>
				<outline text="serverData.stats.ctActiveThreads = 0;"></outline>
				<outline text=""></outline>
				<outline text="flHaveServerData = true; //other code can depend on it being intialized"></outline>
				<outline text=""></outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function updateStatsBeforeSave () {">
			<outline text="var now = new Date ();"></outline>
			<outline text=""></outline>
			<outline text="//stats">
				<outline created="Tue, 29 Apr 2014 01:25:51 GMT" pgfnum="40620" text="serverData.stats.ctHoursServerUp = utils.secondsSince (whenServerStart) / 3600; "></outline>
				<outline created="Tue, 29 Apr 2014 01:25:51 GMT" pgfnum="40620" text="serverData.stats.secsSinceLastFeedRead = utils.secondsSince (serverData.stats.whenLastFeedRead); "></outline>
				<outline text="//set whenLastScanBegin and whenLastScanEnd">
					<outline text="if (serverData.stats.flScanningNow) {">
						<outline text="if (serverData.stats.secsSinceLastFeedRead &gt; 15) {">
							<outline text="serverData.stats.ctScans++;"></outline>
							<outline text="serverData.stats.flScanningNow = false;"></outline>
							<outline text="serverData.stats.whenLastScanEnd = now;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (serverData.stats.secsSinceLastFeedRead &lt; 5) {">
							<outline text="if (!serverData.stats.flScanningNow) {">
								<outline text="serverData.stats.flScanningNow = true;"></outline>
								<outline text="serverData.stats.whenLastScanBegin = now;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="//s3 stats -- 5/30/14 by DW">
				<outline text="serverData.stats.s3stats = s3stats;"></outline>
				</outline>
			<outline text="//memory stats -- 5/30/14 by DW">
				<outline text="serverData.stats.memoryUsage = process.memoryUsage ();"></outline>
				<outline isComment="true" text="serverData.stats.memoryUsage = util.inspect (process.memoryUsage ());"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Sun, 27 Apr 2014 18:57:52 GMT" pgfnum="40558" text="function saveServerData () {">
			<outline text="updateStatsBeforeSave ();"></outline>
			<outline text="stNewObject (s3PrefsAndStatsPath, utils.jsonStringify (serverData, true), &quot;application/json&quot;, s3defaultAcl);"></outline>
			<outline created="Sun, 27 Apr 2014 18:57:57 GMT" pgfnum="40559" text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function addToFeedsInLists (urlfeed) { //5/30/14 by DW">
			<outline text="if (feedsInLists [urlfeed] == undefined) {">
				<outline text="feedsInLists [urlfeed] = 1;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="feedsInLists [urlfeed]++;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveFeedsInLists () { //5/30/14 by DW">
			<outline text="stNewObject (s3FeedsInListsPath, utils.jsonStringify (feedsInLists, true), &quot;application/json&quot;, s3defaultAcl);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function atLeastOneSubscriber (urlfeed) {">
			<outline text="return (feedsInLists [urlfeed] != undefined);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function initFeedsArrayItem (feedstats) {">
			<outline text="if (feedstats.ctReads == undefined) {">
				<outline text="feedstats.ctReads = 0;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (feedstats.whenLastRead == undefined) {">
				<outline text="feedstats.whenLastRead = new Date (0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (feedstats.ctItems == undefined) {">
				<outline text="feedstats.ctItems = 0;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (feedstats.whenLastNewItem == undefined) {">
				<outline text="feedstats.whenLastNewItem = new Date (0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (feedstats.ctReadErrors == undefined) {">
				<outline text="feedstats.ctReadErrors = 0;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (feedstats.whenLastReadError == undefined) {">
				<outline text="feedstats.whenLastReadError = new Date (0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (feedstats.ctConsecutiveReadErrors == undefined) {">
				<outline text="feedstats.ctConsecutiveReadErrors = 0;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (feedstats.ctTimesChosen == undefined) {">
				<outline text="feedstats.ctTimesChosen = 0;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (feedstats.whenLastChosenToRead == undefined) {">
				<outline text="feedstats.whenLastChosenToRead = new Date (0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="//init cloud stats -- 6/4/15 by DW">
				<outline text="if (feedstats.ctCloudRenew === undefined) { ">
					<outline text="feedstats.ctCloudRenew = 0;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (feedstats.whenLastCloudRenew === undefined) {">
					<outline text="feedstats.whenLastCloudRenew = new Date (0);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (feedstats.ctCloudRenewErrors === undefined) {">
					<outline text="feedstats.ctCloudRenewErrors = 0;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (feedstats.ctConsecutiveCloudRenewErrors === undefined) {">
					<outline text="feedstats.ctConsecutiveCloudRenewErrors = 0;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (feedstats.whenLastCloudRenewError === undefined) {">
					<outline text="feedstats.whenLastCloudRenewError = new Date (0);"></outline>
					<outline text="}"></outline>
					</outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function addToFeedsArray (urlfeed, obj, listname) {">
			<outline isComment="true" text="Changes">
				<outline text="6/1/14; 11:03:54 AM by DW">
					<outline text="Don't add to the array if it's already there. This info is coming from the OPML subscription list, which has information about the feed that is possibly out of date. We capture that information from the feed when there are new items, that's the current info from the feed itself. So we don't want to overwrite that info. However we do want to init the item in case new fields are added and old ones removed, and add any new lists it may be part of. "></outline>
					</outline>
				</outline>
			<outline isComment="true" text="console.log (&quot;addToFeedsArray: &quot; + urlfeed);"></outline>
			<outline text=""></outline>
			<outline text="var lowerfeed = urlfeed.toLowerCase (), flfound = false, ixfeed;"></outline>
			<outline text="for (var i = 0; i &lt; feedsArray.length; i++) {">
				<outline text="if (feedsArray [i].url.toLowerCase () == lowerfeed) {">
					<outline text="ixfeed = i;"></outline>
					<outline text="flfound = true;"></outline>
					<outline text="break;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (!flfound) {">
				<outline text="var objnew = new Object ();"></outline>
				<outline text="objnew.url = urlfeed;"></outline>
				<outline text="objnew.lists = [];"></outline>
				<outline text="ixfeed = feedsArray.length;"></outline>
				<outline text="feedsArray [ixfeed] = objnew;"></outline>
				<outline text="for (var x in obj) { //6/1/14 by DW -- moved into the if, only copy fields if the item is new">
					<outline text="feedsArray [ixfeed] [x] = obj [x];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="initFeedsArrayItem (obj);"></outline>
			<outline text=""></outline>
			<outline text="//add list name to the list of lists this feed belongs to">
				<outline text="var lists = feedsArray [ixfeed].lists, fladd = true;"></outline>
				<outline text="for (var i = 0; i &lt; lists.length; i++) {">
					<outline text="if (lists [i] == listname) {">
						<outline text="fladd = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (fladd) {">
					<outline text="lists [lists.length] = listname;"></outline>
					<outline text="}"></outline>
					</outline>
				</outline>
			<outline text=""></outline>
			<outline text="flFeedsArrayDirty = true;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveFeedsArray () {">
			<outline text="flFeedsArrayDirty = false;"></outline>
			<outline text="console.log (&quot;saveFeedsArray: &quot; + s3FeedsArrayPath);"></outline>
			<outline text="stNewObject (s3FeedsArrayPath, utils.jsonStringify (feedsArray, true), &quot;application/json&quot;, s3defaultAcl);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadFeedsArray (callback) {">
			<outline text="stGetObject (s3FeedsArrayPath, function (error, data) {">
				<outline text="if (!error) {">
					<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="feedsArray = parseJson (data.Body, s3FeedsArrayPath);"></outline>
					<outline text="for (var i = 0; i &lt; feedsArray.length; i++) {">
						<outline text="initFeedsArrayItem (feedsArray [i]);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function findInFeedsArray (urlfeed) {">
			<outline text="var lowerfeed = urlfeed.toLowerCase (), flfound = false, ixfeed;"></outline>
			<outline text="for (var i = 0; i &lt; feedsArray.length; i++) {">
				<outline text="if (feedsArray [i].url.toLowerCase () == lowerfeed) {">
					<outline text="var feedstats = feedsArray [i];"></outline>
					<outline text="initFeedsArrayItem (feedstats);"></outline>
					<outline text="return (feedstats);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (undefined);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function findNextFeedToRead () {">
			<outline isComment="true" text="Changes">
				<outline text="5/31/14; 12:21:39 PM by DW">
					<outline text="Check for feedstats being undefined, which happens when you first install River4."></outline>
					</outline>
				<outline text="5/30/14; 9:48:55 AM by DW">
					<outline text="Fixed a bug where we were ignoring newly-subscribed to feeds. Early days! :-)"></outline>
					</outline>
				<outline text="5/26/14; 10:03:04 PM by DW">
					<outline text="Mix things up. Half the scans search from end of array to beginning. "></outline>
					</outline>
				<outline text="5/25/14; 11:27:12 AM by DW">
					<outline text="Created. To start, find the least-recently-read feed. It'll get fancier later."></outline>
					</outline>
				</outline>
			<outline text="var now = new Date (), whenLeastRecent = now, feedstats = feedsArray [0];"></outline>
			<outline text=""></outline>
			<outline text="function checkOne (ix) {">
				<outline text="if (atLeastOneSubscriber (feedsArray [ix].url)) {">
					<outline text="var d = feedsArray [ix].whenLastChosenToRead;"></outline>
					<outline text="if (d == undefined) { //newly subscribed, it moves to the head of the queue">
						<outline text="d = new Date (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="d = new Date (d);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (d &lt; whenLeastRecent) {">
						<outline text="whenLeastRecent = d;"></outline>
						<outline text="feedstats = feedsArray [ix];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (utils.random (0, 1) == 1) {">
				<outline text="for (var i = feedsArray.length - 1; i &gt;= 0; i--) {">
					<outline text="checkOne (i);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="for (var i = 0; i &lt; feedsArray.length; i++) {">
					<outline text="checkOne (i);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (feedstats == undefined) {">
				<outline text="return (undefined);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="if (utils.secondsSince (feedstats.whenLastChosenToRead) &lt; (serverData.prefs.ctMinutesBetwBuilds * 60)) { //not ready to read">
					<outline isComment="true" text="if (flScanningNow) { //end of a scan">
						<outline text="serverData.stats.whenLastScanEnd = now;"></outline>
						<outline text="serverData.stats.ctScans++;"></outline>
						<outline text="flScanningNow = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="initFeedsArrayItem (feedstats);"></outline>
					<outline text="feedstats.ctTimesChosen++;"></outline>
					<outline text="feedstats.whenLastChosenToRead = new Date ();"></outline>
					<outline text="flFeedsArrayDirty = true;"></outline>
					<outline isComment="true" text="if (!flScanningNow) { //we're starting a scan">
						<outline text="serverData.stats.whenLastScanBegin = now;"></outline>
						<outline text="flScanningNow = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (feedstats);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function getItemGuid (item) {">
			<outline text="function ok (val) {">
				<outline text="if (val != undefined) {">
					<outline text="if (val != &quot;null&quot;) {">
						<outline text="return (true);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (ok (item.guid)) {">
				<outline text="return (item.guid);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var guid = &quot;&quot;;"></outline>
			<outline text="if (ok (item.pubDate)) {">
				<outline text="guid += item.pubDate;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (ok (item.link)) {">
				<outline text="guid += item.link;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (ok (item.title)) {">
				<outline text="guid += item.title;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (guid.length &gt; 0) {">
				<outline text="guid = md5 (guid);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (guid);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function initFeed (urlfeed, callback, flwrite) {">
			<outline isComment="true" text="Changes">
				<outline text="11/1/14; 4:32:51 PM by DW">
					<outline text="Process strings differently depending on the platform and whether we're writing to the file system.">
						<outline text="Problem is described in this list post -- https://groups.google.com/forum/?fromgroups#!topic/river4/rAEMa4J53Rw"></outline>
						<outline text="The rules for the Windows file system are here -- http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx"></outline>
						</outline>
					</outline>
				<outline text="5/30/14; 6:13:11 PM by DW">
					<outline text="New optional param, flwrite. If true, we write the feed after calling the callback. This can only work if the callback doesn't do any I/O. So we default to false."></outline>
					</outline>
				</outline>
			<outline text="function cleanFilenameForPlatform (s) { //11/1/14 by DW">
				<outline text="var flprocessed = false;"></outline>
				<outline text="if (fspath != undefined) { //we're running on the local file system">
					<outline text="switch (process.platform) { //11/1/14 by DW">
						<outline text="case &quot;win32&quot;:">
							<outline text="s = utils.replaceAll (s, &quot;/&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;?&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;:&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;&lt;&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;&gt;&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;\&quot;&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;\\&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;|&quot;, &quot;_&quot;);"></outline>
							<outline text="s = utils.replaceAll (s, &quot;*&quot;, &quot;_&quot;);"></outline>
							<outline text="flprocessed = true;"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (!flprocessed) {">
					<outline text="s = utils.replaceAll (s, &quot;/&quot;, &quot;:&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getFolderPath (urlfeed) { //return path to S3 folder for this feed">
				<outline text="var s = urlfeed;"></outline>
				<outline text="if (utils.beginsWith (s, &quot;http://&quot;)) {">
					<outline text="s = utils.stringDelete (s, 1, 7);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (utils.beginsWith (s, &quot;https://&quot;)) {">
						<outline text="s = utils.stringDelete (s, 1, 8);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="s = cleanFilenameForPlatform (s); //11/1/14 by DW"></outline>
				<outline text="s = s3FeedsDataFolder + s + &quot;/&quot;;"></outline>
				<outline isComment="true" text="console.log (s);"></outline>
				<outline text="return (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var folderpath = getFolderPath (urlfeed), infofilepath = folderpath + &quot;feedInfo.json&quot;;"></outline>
			<outline text="var obj, starttime = new Date ();"></outline>
			<outline text="if (flwrite === undefined) {">
				<outline text="flwrite = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="stGetObject (infofilepath, function (error, data) {">
				<outline text="if (error) {">
					<outline text="obj = new Object ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="obj = parseJson (data.Body, infofilepath);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="//prefs">
					<outline text="if (obj.prefs == undefined) {">
						<outline text="obj.prefs = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.prefs.enabled === undefined) {">
						<outline text="obj.prefs.enabled = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.prefs.url == undefined) {">
						<outline text="obj.prefs.url = urlfeed;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.prefs.ctSecsBetwRenews == undefined) {">
						<outline text="obj.prefs.ctSecsBetwRenews = 24 * 60 * 60; //24 hours"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.prefs.flNonListSubscribe == undefined) {">
						<outline text="obj.prefs.flNonListSubscribe = false;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//data">
					<outline text="if (obj.data == undefined) {">
						<outline text="obj.data = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.data.feedhash == undefined) {">
						<outline text="obj.data.feedhash = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//stats">
					<outline text="if (obj.stats == undefined) {">
						<outline text="obj.stats = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.s3MyPath == undefined) {">
						<outline text="obj.stats.s3MyPath = infofilepath;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.s3FolderPath == undefined) {">
						<outline text="obj.stats.s3FolderPath = folderpath;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctReads == undefined) {">
						<outline text="obj.stats.ctReads = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctReadErrors == undefined) {">
						<outline text="obj.stats.ctReadErrors = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctConsecutiveReadErrors == undefined) {">
						<outline text="obj.stats.ctConsecutiveReadErrors = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.whenLastReadError == undefined) {">
						<outline text="obj.stats.whenLastReadError = new Date (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.lastReadError == undefined) {">
						<outline text="obj.stats.lastReadError = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctItems == undefined) {">
						<outline text="obj.stats.ctItems = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctEnclosures == undefined) {">
						<outline text="obj.stats.ctEnclosures = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.whenLastRead == undefined) {">
						<outline text="obj.stats.whenLastRead = new Date (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.whenLastNewItem == undefined) {">
						<outline text="obj.stats.whenLastNewItem = new Date (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.whenSubscribed == undefined) {">
						<outline text="obj.stats.whenSubscribed = new Date ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctFeedTextChanges == undefined) {">
						<outline text="obj.stats.ctFeedTextChanges = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ct304s == undefined) {">
						<outline text="obj.stats.ct304s = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.mostRecentPubDate == undefined) {">
						<outline text="obj.stats.mostRecentPubDate = new Date (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctItemsTooOld == undefined) {">
						<outline text="obj.stats.ctItemsTooOld = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctReadsSkipped == undefined) {">
						<outline text="obj.stats.ctReadsSkipped = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//feedInfo">
					<outline text="if (obj.feedInfo == undefined) {">
						<outline text="obj.feedInfo = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.feedInfo.title == undefined) {">
						<outline text="obj.feedInfo.title = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.feedInfo.link == undefined) {">
						<outline text="obj.feedInfo.link = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.feedInfo.description == undefined) {">
						<outline text="obj.feedInfo.description = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//misc">
					<outline text="if (obj.history == undefined) {">
						<outline text="obj.history = new Array ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.lists == undefined) {">
						<outline text="obj.lists = new Array ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.calendar == undefined) {">
						<outline text="obj.calendar = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="obj.stats.secsLastInit = secsLastInit; //debugging"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback (obj);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (flwrite) {">
					<outline text="stNewObject (infofilepath, utils.jsonStringify (obj, true), &quot;application/json&quot;, s3defaultAcl, function (error, data) {">
						<outline text="secsLastInit = utils.secondsSince (starttime);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="secsLastInit = utils.secondsSince (starttime);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveFeed (feed, callback) {">
			<outline isComment="true" text="Changes">
				<outline text="6/5/15; 9:54:26 AM by DW">
					<outline text="Added optional callback parameter. "></outline>
					</outline>
				</outline>
			<outline text="stNewObject (feed.stats.s3MyPath, utils.jsonStringify (feed, true), &quot;application/json&quot;, s3defaultAcl, function (error, data) {">
				<outline text="if (callback !== undefined) { //6/5/15 by DW">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function readFeed (urlfeed, callback) {">
			<outline isComment="true" text="Changes">
				<outline text="6/5/15; 9:53:40 AM by DW">
					<outline text="Added optional callback parameter. "></outline>
					</outline>
				<outline text="6/3/15; 8:16:48 PM by DW">
					<outline text="After we're finished looping over the items, remove items from the history array that are no longer present in the feed."></outline>
					</outline>
				<outline text="5/21/14; 10:51:03 AM by DW">
					<outline text="Created. Read the feed,  call the callback for every new item we find."></outline>
					</outline>
				</outline>
			<outline text="var starttime = new Date ();"></outline>
			<outline text="var itemsInFeed = new Object (); //6/3/15 by DW"></outline>
			<outline text="initFeed (urlfeed, function (feed) {">
				<outline text="if (feed.prefs.enabled) {">
					<outline text="var ctitemsthisfeed = 0, flfirstread = feed.stats.ctReads == 0, feedstats;"></outline>
					<outline text="feedstats = findInFeedsArray (urlfeed); //the in-memory feed stats, stuff the scanner uses to figure out which feed to read next"></outline>
					<outline text="//stats">
						<outline text="serverData.stats.ctFeedReads++;"></outline>
						<outline text="serverData.stats.ctFeedReadsLastHour++;"></outline>
						<outline text="serverData.stats.ctFeedReadsThisRun++;"></outline>
						<outline text="serverData.stats.lastFeedRead = urlfeed;"></outline>
						<outline text="serverData.stats.whenLastFeedRead = starttime;"></outline>
						<outline text=""></outline>
						<outline text="feed.stats.ctReads++;"></outline>
						<outline text="feed.stats.whenLastRead = starttime;"></outline>
						<outline text=""></outline>
						<outline text="feedstats.ctReads++;"></outline>
						<outline text="feedstats.whenLastRead = starttime;"></outline>
						<outline text=""></outline>
						<outline text="console.log (&quot;readFeed: &quot; + urlfeed);"></outline>
						<outline text=""></outline>
						<outline text="flFeedsArrayDirty = true;"></outline>
						</outline>
					<outline text="serverData.stats.ctActiveThreads++;"></outline>
					<outline text="if (utils.beginsWith (urlfeed, &quot;feed://&quot;)) { //8/13/15 by DW">
						<outline text="urlfeed = &quot;http://&quot; + utils.stringDelete (urlfeed, 1, 7);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var req = request (urlfeed);"></outline>
					<outline text="var feedparser = new FeedParser ();"></outline>
					<outline text="req.on (&quot;response&quot;, function (res) {">
						<outline text="var stream = this;"></outline>
						<outline text="serverData.stats.ctActiveThreads--;"></outline>
						<outline text="if (res.statusCode == 200) {">
							<outline text="stream.pipe (feedparser);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="req.on (&quot;error&quot;, function (res) {">
						<outline text="feed.stats.ctReadErrors++;"></outline>
						<outline text="feed.stats.ctConsecutiveReadErrors++;"></outline>
						<outline text="feed.stats.whenLastReadError = starttime;"></outline>
						<outline text=""></outline>
						<outline text="feedstats.ctReadErrors++;"></outline>
						<outline text="feedstats.ctConsecutiveReadErrors++;"></outline>
						<outline text="feedstats.whenLastReadError = starttime;"></outline>
						<outline text=""></outline>
						<outline text="serverData.stats.ctActiveThreads--;"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="feedparser.on (&quot;readable&quot;, function () {">
						<outline text="var item = this.read (), flnew;"></outline>
						<outline text="if (new Date (item.pubDate) &gt; new Date (feed.stats.mostRecentPubDate)) {">
							<outline isComment="true" text="console.log (item.pubDate + &quot; &gt; &quot; + feed.stats.mostRecentPubDate);"></outline>
							<outline text="feed.stats.mostRecentPubDate = item.pubDate;"></outline>
							<outline text="feedstats.mostRecentPubDate = item.pubDate;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="//set flnew -- do the history thing">
							<outline text="var theGuid = getItemGuid (item);"></outline>
							<outline text="itemsInFeed [theGuid] = true; //6/3/15 by DW"></outline>
							<outline text="flnew = true;"></outline>
							<outline created="Sat, 23 Nov 2013 16:36:28 GMT" pgfnum="32073" text="for (var i = 0; i &lt; feed.history.length; i++) {">
								<outline created="Sat, 23 Nov 2013 16:36:39 GMT" pgfnum="32075" text="if (feed.history [i].guid == theGuid) { //we've already seen it">
									<outline text="flnew = false;"></outline>
									<outline text="break;"></outline>
									<outline created="Sat, 23 Nov 2013 16:37:02 GMT" pgfnum="32076" text="}"></outline>
									</outline>
								<outline created="Sat, 23 Nov 2013 16:36:30 GMT" pgfnum="32074" text="}"></outline>
								</outline>
							</outline>
						<outline text="if (flnew) { //add to the history array">
							<outline text="var obj = new Object (), flAddToRiver = true;"></outline>
							<outline text="obj.title = item.title; //helps with debugging"></outline>
							<outline text="obj.guid = theGuid;"></outline>
							<outline text="obj.when = starttime;"></outline>
							<outline text="feed.history [feed.history.length] = obj;"></outline>
							<outline text=""></outline>
							<outline text="//stats">
								<outline text="feed.stats.ctItems++;"></outline>
								<outline text="feed.stats.whenLastNewItem = starttime;"></outline>
								<outline text=""></outline>
								<outline text="feedstats.ctItems++;"></outline>
								<outline text="feedstats.whenLastNewItem = starttime;"></outline>
								<outline text=""></outline>
								</outline>
							<outline text=""></outline>
							<outline text="//copy feed info from item into the feed record -- 6/1/14 by DW">
								<outline text="feed.feedInfo.title = item.meta.title;"></outline>
								<outline text="feed.feedInfo.link = item.meta.link;"></outline>
								<outline text="feed.feedInfo.description = item.meta.description;"></outline>
								</outline>
							<outline text="//copy cloud info, if present -- 6/3/15 by DW">
								<outline text="if (item.meta.cloud !== undefined) {">
									<outline text="if (item.meta.cloud.domain !== undefined) {">
										<outline text="feed.feedInfo.cloud = {">
											<outline text="domain: item.meta.cloud.domain,"></outline>
											<outline text="port: item.meta.cloud.port,"></outline>
											<outline text="path: item.meta.cloud.path,"></outline>
											<outline text="port: item.meta.cloud.port,"></outline>
											<outline text="registerProcedure: item.meta.cloud.registerprocedure,"></outline>
											<outline text="protocol: item.meta.cloud.protocol"></outline>
											<outline text="};"></outline>
											</outline>
										<outline text="feedstats.cloud = {">
											<outline text="domain: item.meta.cloud.domain,"></outline>
											<outline text="port: item.meta.cloud.port,"></outline>
											<outline text="path: item.meta.cloud.path,"></outline>
											<outline text="port: item.meta.cloud.port,"></outline>
											<outline text="registerProcedure: item.meta.cloud.registerprocedure,"></outline>
											<outline text="protocol: item.meta.cloud.protocol,"></outline>
											<outline text="};"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="//copy feeds info from item into feeds in-memory array element -- 6/1/14 by DW">
								<outline text="feedstats.title = item.meta.title;"></outline>
								<outline text="feedstats.text = item.meta.title;"></outline>
								<outline text="feedstats.htmlurl = item.meta.link;"></outline>
								<outline text="feedstats.description = item.meta.description;"></outline>
								<outline text="flFeedsArrayDirty = true;"></outline>
								</outline>
							<outline text=""></outline>
							<outline text="//exclude items that newly appear in feed but have a too-old pubdate">
								<outline text="if ((item.pubDate != null) &amp;&amp; (new Date (item.pubDate) &lt; utils.dateYesterday (feed.stats.mostRecentPubDate)) &amp;&amp; (!flfirstread)) { ">
									<outline text="flAddToRiver = false;"></outline>
									<outline text="feed.stats.ctItemsTooOld++;"></outline>
									<outline text="feed.stats.whenLastTooOldItem = starttime;"></outline>
									<outline isComment="true" text="console.log (&quot;Excluded as too old, even though not seen before: &quot; + item.title);"></outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="if ((flAddToRiver) &amp;&amp; (!flfirstread)) {">
								<outline text="addToRiver (urlfeed, item);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="if (serverData.prefs.flWriteItemsToFiles) { //debugging">
							<outline text="var path = feed.stats.s3FolderPath + &quot;items/&quot; + utils.padWithZeros (ctitemsthisfeed++, 3) + &quot;.json&quot;;"></outline>
							<outline text="stNewObject (path, utils.jsonStringify (item, true), &quot;application/json&quot;, s3defaultAcl);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="feedparser.on (&quot;end&quot;, function () {">
						<outline text="//delete items in the history array that are no longer in the feed -- 6/3/15 by DW">
							<outline text="var ctHistoryItemsDeleted = 0;"></outline>
							<outline text="for (var i = feed.history.length - 1; i &gt;= 0; i--) { //6/3/15 by DW">
								<outline text="if (itemsInFeed [feed.history [i].guid] === undefined) { //it's no longer in the feed">
									<outline text="feed.history.splice (i, 1);"></outline>
									<outline text="ctHistoryItemsDeleted++;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (ctHistoryItemsDeleted &gt; 0) {">
								<outline text="console.log (&quot;readFeed: ctHistoryItemsDeleted == &quot; + ctHistoryItemsDeleted);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text=""></outline>
							</outline>
						<outline text="feed.stats.ctSecsLastRead = utils.secondsSince (starttime);"></outline>
						<outline text="saveFeed (feed, function () {">
							<outline text="if (callback !== undefined) { //6/5/15 by DW">
								<outline text="callback ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="feedparser.on (&quot;error&quot;, function () {">
						<outline text="feed.stats.ctReadErrors++;"></outline>
						<outline text="feed.stats.ctConsecutiveReadErrors++;"></outline>
						<outline text="feed.stats.whenLastReadError = starttime;"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function readIncludedList (listname, urloutline) { //6/17/14 by DW">
			<outline text="var req = request (urloutline);"></outline>
			<outline text="var opmlparser = new OpmlParser ();"></outline>
			<outline text=""></outline>
			<outline text="console.log (&quot;readIncludedList: listname == &quot; + listname + &quot;, urloutline == &quot; + urloutline);"></outline>
			<outline text=""></outline>
			<outline text="req.on (&quot;response&quot;, function (res) {">
				<outline text="var stream = this;"></outline>
				<outline text="if (res.statusCode == 200) {">
					<outline text="stream.pipe (opmlparser);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="req.on (&quot;error&quot;, function (res) {">
				<outline text="});"></outline>
				</outline>
			<outline text="opmlparser.on (&quot;error&quot;, function (error) {">
				<outline text="console.log (&quot;readIncludedList: opml parser error == &quot; + error.message);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="opmlparser.on (&quot;readable&quot;, function () {">
				<outline text="var outline;"></outline>
				<outline text="while (outline = this.read ()) {">
					<outline text="var type = outline [&quot;#type&quot;];"></outline>
					<outline text="if (type == &quot;feed&quot;) {">
						<outline text="if ((outline.xmlurl != undefined) &amp;&amp; (outline.xmlurl.length &gt; 0)) { //6/9/14 by DW">
							<outline text="addToFeedsArray (outline.xmlurl, outline, listname); "></outline>
							<outline text="addToFeedsInLists (outline.xmlurl); //5/30/14 by DW"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="opmlparser.on (&quot;end&quot;, function () {">
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function readOneList (listname, filepath) {">
			<outline text="console.log (&quot;readOneList: listname == &quot; + listname + &quot;, filepath == &quot; + filepath);"></outline>
			<outline text="var opmlparser = new OpmlParser ();"></outline>
			<outline text="opmlparser.on (&quot;error&quot;, function (error) {">
				<outline text="console.log (&quot;scanner: opml parser error == &quot; + error.message);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="opmlparser.once (&quot;readable&quot;, function () {">
				<outline isComment="true" text="console.log (&quot;scanner: outline title == &quot; + this.meta.title)"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="opmlparser.on (&quot;readable&quot;, function () {">
				<outline text="var outline;"></outline>
				<outline text="while (outline = this.read ()) {">
					<outline text="var type = outline [&quot;#type&quot;];"></outline>
					<outline text=""></outline>
					<outline text="if (type == &quot;feed&quot;) {">
						<outline text="if ((outline.xmlurl != undefined) &amp;&amp; (outline.xmlurl.length &gt; 0)) { //6/9/14 by DW">
							<outline text="addToFeedsArray (outline.xmlurl, outline, listname); "></outline>
							<outline text="addToFeedsInLists (outline.xmlurl); //5/30/14 by DW"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else { //6/17/14 by DW">
						<outline text="if (outline.type != undefined) {">
							<outline text="if (outline.type == &quot;include&quot;) {">
								<outline text="qAddTask (&quot;readIncludedList (\&quot;&quot; + listname + &quot;\&quot;, \&quot;&quot; + outline.url + &quot;\&quot;)&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="opmlparser.on (&quot;end&quot;, function () {">
				<outline isComment="true" text="console.log (&quot;scanner: opml parser end.&quot;);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="stGetObject (filepath, function (error, data) {">
				<outline text="if (error) {">
					<outline text="console.log (&quot;readOneList: error == &quot; + error.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="opmlparser.end (data.Body.toString ());"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function initList (name, callback) {">
			<outline text="var foldername = name, infofilepath;"></outline>
			<outline text="if (utils.endsWith (foldername, &quot;.opml&quot;)) {">
				<outline text="foldername = utils.stringDelete (foldername, foldername.length - 4, 5);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="infofilepath = s3ListsDataFolder + foldername + &quot;/listInfo.json&quot;;"></outline>
			<outline text="stGetObject (infofilepath, function (error, data) {">
				<outline text="if (error) {">
					<outline text="obj = new Object ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="obj = parseJson (data.Body, infofilepath);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="//prefs">
					<outline text="if (obj.prefs == undefined) {">
						<outline text="obj.prefs = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.prefs.enabled == undefined) {">
						<outline text="obj.prefs.enabled = true;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//stats">
					<outline text="if (obj.stats == undefined) {">
						<outline text="obj.stats = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctReads == undefined) {">
						<outline text="obj.stats.ctReads = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.whenLastRead == undefined) {">
						<outline text="obj.stats.whenLastRead = new Date (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.whenSubscribed == undefined) {">
						<outline text="obj.stats.whenSubscribed = new Date ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.stats.ctBlockedItems == undefined) {">
						<outline text="obj.stats.ctBlockedItems = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//listInfo">
					<outline text="if (obj.listInfo == undefined) {">
						<outline text="obj.listInfo = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.listInfo.title == undefined) {">
						<outline text="obj.listInfo.title = &quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text="//misc">
					<outline text="if (obj.feeds == undefined) {">
						<outline text="obj.feeds = new Array ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.feedsBlocked == undefined) {">
						<outline text="obj.feedsBlocked = new Array ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.calendar == undefined) {">
						<outline text="obj.calendar = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (obj.river == undefined) {">
						<outline text="obj.river = new Object ();"></outline>
						<outline text="}"></outline>
						</outline>
					</outline>
				<outline text=""></outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback (obj);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="stNewObject (infofilepath, utils.jsonStringify (obj, true), &quot;application/json&quot;, s3defaultAcl, function (error, data) {">
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadListsFromFolder () {">
			<outline isComment="true" text="Changes">
				<outline text="11/1/14; 4:20:32 PM by DW">
					<outline text="Only read files with names that end with .opml so we don't read invisible files like .DS_Store on the Mac."></outline>
					</outline>
				<outline text="6/7/14; 11:59:26 AM by DW">
					<outline text="Before reading the lists, we loop over the feedsArray, emptying  the list of lists for each feed. Otherwise there is no way for a feed to leave a list."></outline>
					</outline>
				<outline text="5/28/14; 12:16:37 PM by DW">
					<outline text="We now keep a list of all the list names in serverData.stats."></outline>
					</outline>
				</outline>
			<outline text="var now = new Date ();"></outline>
			<outline text="for (var i = 0; i &lt; feedsArray.length; i++) { //6/7/14 by DW">
				<outline text="feedsArray [i].lists = [];"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="serverData.stats.ctListFolderReads++;"></outline>
			<outline text="serverData.stats.whenLastListFolderRead = now;"></outline>
			<outline text="serverData.stats.listNames = new Array ();"></outline>
			<outline text="feedsInLists = new Object ();"></outline>
			<outline created="Wed, 19 Mar 2014 19:59:25 GMT" pgfnum="39572" text="stListObjects (s3UserListsPath, function (obj) { //read user's list files">
				<outline created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728" text="if (obj.flLastObject != undefined) {">
					<outline isComment="true" text="qAddTask (&quot;buildAllRivers ()&quot;);"></outline>
					<outline created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731" text="}"></outline>
					</outline>
				<outline created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732" text="else {">
					<outline text="if (obj.Size &gt; 0) { //it's a file">
						<outline text="var filepath = obj.s3path;"></outline>
						<outline text="var listname = utils.stringNthField (filepath, &quot;/&quot;, utils.stringCountFields (filepath, &quot;/&quot;)); //something like myList.opml"></outline>
						<outline text="if (utils.endsWith (listname, &quot;.opml&quot;)) { //11/1/14 by DW">
							<outline text="serverData.stats.listNames [serverData.stats.listNames.length] = listname; //5/28/14 by DW"></outline>
							<outline text="initList (listname, function () {">
								<outline text="qAddTask (&quot;readOneList (\&quot;&quot; + listname + &quot;\&quot;, \&quot;&quot; + filepath + &quot;\&quot;)&quot;);"></outline>
								<outline text="});"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733" text="}"></outline>
					</outline>
				<outline created="Wed, 19 Mar 2014 19:59:50 GMT" pgfnum="39573" text="});"></outline>
				</outline>
			<outline text="}"></outline>
			<outline text=""></outline>
			</outline>
		<outline text="function getAllLists (callback) {">
			<outline text="var theLists = new Array ();"></outline>
			<outline text="function getOneFile (ix) {">
				<outline text="if (ix &gt;= serverData.stats.listNames.length) {">
					<outline text="callback (theLists);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var fname = serverData.stats.listNames [ix], f = s3UserListsPath + fname;"></outline>
					<outline text="stGetObject (f, function (error, data) {">
						<outline text="if (error) {">
							<outline text="console.log (&quot;getAllLists: error reading list &quot; + fname + &quot; error == &quot; + error.message);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="theLists [theLists.length] = {">
								<outline text="listname: fname,"></outline>
								<outline text="opmltext: data.Body.toString ()"></outline>
								<outline text="};"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="getOneFile (ix + 1);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="getOneFile (0);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getOneFeed (urlfeed, callback) { //11/26/14 by DW">
			<outline text="initFeed (urlfeed, function (feed) {">
				<outline text="callback (feed);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getOneRiver (fname, callback) { //11/28/14 by DW">
			<outline text="var name = utils.stringPopLastField (fname, &quot;.&quot;); //get rid of .opml extension if present"></outline>
			<outline text="var path = s3UserRiversPath + name + &quot;.js&quot;;"></outline>
			<outline text="stGetObject (path, function (error, data) {">
				<outline text="var s;"></outline>
				<outline text="if (error) {">
					<outline text="s = &quot;&quot;;"></outline>
					<outline text="console.log (&quot;getOneRiver: error == &quot; + utils.jsonStringify (error));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="s = data.Body.toString ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback (s);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getFeedMetadata (url, callback) { //12/1/14 by DW">
			<outline text="var req = request (url), feedparser = new FeedParser ();"></outline>
			<outline text="req.on (&quot;response&quot;, function (res) {">
				<outline text="var stream = this;"></outline>
				<outline text="if (res.statusCode == 200) {">
					<outline text="stream.pipe (feedparser);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="req.on (&quot;error&quot;, function (res) {">
				<outline text="callback (undefined);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="feedparser.on (&quot;readable&quot;, function () {">
				<outline text="var item = this.read ();"></outline>
				<outline text="callback (item.meta);    "></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="feedparser.on (&quot;end&quot;, function () {">
				<outline text="callback (undefined);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="feedparser.on (&quot;error&quot;, function () {">
				<outline text="callback (undefined);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveSubscriptionList (listname, xmltext) { //12/1/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="12/4/14; 11:14:06 AM by DW">
					<outline text="Also write the list to the backups folder."></outline>
					</outline>
				</outline>
			<outline text="var path = s3UserListsPath + listname, now = new Date ();"></outline>
			<outline text="stNewObject (path, xmltext, &quot;text/xml&quot;, s3defaultAcl, function (error, data) {">
				<outline text="var serialnum = utils.padWithZeros (++serverData.stats.backupSerialnum, 3);"></outline>
				<outline text="var fname = utils.stringPopLastField (listname, &quot;.&quot;) + serialnum + &quot;.opml&quot;; //something like movies024.opml"></outline>
				<outline text="var backuppath = s3BackupsFolder + utils.getDatePath (undefined, true) + fname;"></outline>
				<outline text="stNewObject (backuppath, xmltext, &quot;text/xml&quot;, s3defaultAcl, function (error, data) {">
					<outline text="serverData.stats.ctListSaves++;"></outline>
					<outline text="serverData.stats.whenLastListSave = now; "></outline>
					<outline text="readOneList (listname, path);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function pleaseNotify (urlServer, domain, port, path, urlFeed, feedstats, callback) { //6/4/15 by DW">
			<outline text="var now = new Date ();"></outline>
			<outline text="var theRequest = {">
				<outline text="url: urlServer,"></outline>
				<outline text="followRedirect: true, "></outline>
				<outline text="headers: {Accept: &quot;application/json&quot;},"></outline>
				<outline text="method: &quot;POST&quot;,"></outline>
				<outline text="form: {">
					<outline text="port: port,"></outline>
					<outline text="path: path,"></outline>
					<outline text="url1: urlFeed,"></outline>
					<outline text="protocol: &quot;http-post&quot;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline isComment="true" text="if (domain !== undefined) {">
				<outline text="theRequest.form.domain = domain;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="request (theRequest, function (error, response, body) {">
				<outline text="try {">
					<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
						<outline isComment="true" text="var serverResponse = JSON.parse (response.body);"></outline>
						<outline text="feedstats.ctConsecutiveCloudRenewErrors = 0;"></outline>
						<outline text="if (callback) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;pleaseNotify: urlServer == &quot; + urlServer + &quot;, error, code == &quot; + response.statusCode + &quot;.\n&quot;);"></outline>
						<outline text="feedstats.ctCloudRenewErrors++; //counts the number of communication errors"></outline>
						<outline text="feedstats.ctConsecutiveCloudRenewErrors++;"></outline>
						<outline text="feedstats.whenLastCloudRenewError = now;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="catch (err) {">
					<outline text="console.log (&quot;pleaseNotify: urlServer == &quot; + urlServer + &quot;, err.message == &quot; + err.message);"></outline>
					<outline text="feedstats.ctCloudRenewErrors++; //counts the number of communication errors"></outline>
					<outline text="feedstats.ctConsecutiveCloudRenewErrors++;"></outline>
					<outline text="feedstats.whenLastCloudRenewError = now;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="feedstats.ctCloudRenew++;"></outline>
				<outline text="feedstats.whenLastCloudRenew = now;"></outline>
				<outline text="flFeedsArrayDirty = true; //because we modified feedstats"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function renewNextSubscription () { //6/4/15 by DW">
			<outline isComment="true" text="Changes">
				<outline text="6/4/15; 10:44:46 AM by DW">
					<outline text="Find the next rssCloud subscription that needs to be renewed."></outline>
					<outline text="You can turn this off by defining appConfig.flRequestCloudNotify as false."></outline>
					</outline>
				</outline>
			<outline text="if (serverData.prefs.flRequestCloudNotify) {">
				<outline text="var theFeed;"></outline>
				<outline text="for (var i = 0; i &lt; feedsArray.length; i++) {">
					<outline text="theFeed = feedsArray [i];"></outline>
					<outline text="if (theFeed.cloud !== undefined) {">
						<outline text="if (utils.secondsSince (theFeed.whenLastCloudRenew) &gt; (23 * 60 * 60)) { //ready to be renewed">
							<outline text="var urlCloudServer = &quot;http://&quot; + theFeed.cloud.domain + &quot;:&quot; + theFeed.cloud.port + theFeed.cloud.path;"></outline>
							<outline isComment="true" text="var myDomain = serverData.prefs.myDomainForRssCloudRequests;"></outline>
							<outline isComment="true" text="if (myDomain.length == 0) {">
								<outline text="myDomain = undefined;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="pleaseNotify (urlCloudServer, undefined, myPort, &quot;/feedupdated&quot;, theFeed.url, theFeed, function () {">
								<outline text="console.log (&quot;renewNextSubscription: urlCloudServer == &quot; + urlCloudServer);"></outline>
								<outline text="});"></outline>
								</outline>
							<outline text="return; //we renew at most one each time we're called"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function rssCloudFeedUpdated (urlFeed) { //6/4/15 by DW">
			<outline isComment="true" text="Changes">
				<outline text="6/4/15; 1:17:37 PM by DW">
					<outline text="Called when an update comes in for a feed."></outline>
					</outline>
				</outline>
			<outline text="var feedstats = findInFeedsArray (urlFeed);"></outline>
			<outline text="if (feedstats === undefined) {">
				<outline text="console.log (&quot;\nrssCloudFeedUpdated: url == &quot; + urlFeed + &quot;, but we're not subscribed to this feed, so it wasn't read.\n&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="var now = new Date ();"></outline>
				<outline text="serverData.stats.whenLastRssCloudUpdate = now;"></outline>
				<outline text="serverData.stats.ctRssCloudUpdates++;"></outline>
				<outline text="console.log (&quot;\nrssCloudFeedUpdated: url == &quot; + urlFeed + &quot;, now == &quot; + now.toLocaleString ());"></outline>
				<outline text="readFeed (urlFeed, function () {">
					<outline text="for (var i = 0; i &lt; feedstats.lists.length; i++) {">
						<outline text="var listname = &quot;\&quot;&quot; + feedstats.lists [i] + &quot;\&quot;&quot;;"></outline>
						<outline text="var flskip = serverData.prefs.flSkipDuplicateTitles;"></outline>
						<outline text="var s = &quot;buildOneRiver (&quot; + listname + &quot;, true, &quot; + flskip + &quot;, true);&quot;;"></outline>
						<outline text="console.log (&quot;rssCloudFeedUpdated: &quot; + s);"></outline>
						<outline text="qAddTask (s);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function applyPrefs () {">
			<outline text="http.globalAgent.maxSockets = serverData.prefs.maxThreads * 5;"></outline>
			<outline text="https.globalAgent.maxSockets = serverData.prefs.maxThreads * 5;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function copyIndexFile () { //6/1/14 by DW">
			<outline text="if (serverData.prefs.enabled) {">
				<outline text="stGetObject (s3IndexFile, function (error, data) {">
					<outline text="if (error) {">
						<outline text="request (urlIndexSource, function (error, response, htmltext) {">
							<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
								<outline text="stNewObject (s3IndexFile, htmltext, &quot;text/html&quot;, s3defaultAcl, function (error, data) {">
									<outline isComment="true" text="console.log (&quot;copyIndexFile: &quot; + s3IndexFile);"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function buildRiversArray () { //6/1/14 by DW -- build a data structure used by the river browser">
			<outline text="var riversArray = new Array ();"></outline>
			<outline text="for (var i = 0; i &lt; serverData.stats.listNames.length; i++) {">
				<outline text="var obj = new Object (), rivername = utils.stringPopLastField (serverData.stats.listNames [i], &quot;.&quot;);"></outline>
				<outline text="obj.url = &quot;rivers/&quot; + rivername + &quot;.js&quot;; //designed for an app running at the top level of the bucket"></outline>
				<outline text="obj.title = rivername;"></outline>
				<outline text="obj.longTitle =  rivername;"></outline>
				<outline text="obj.description = &quot;&quot;;"></outline>
				<outline text="riversArray [i] = obj;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="stNewObject (s3RiversArrayPath, utils.jsonStringify (riversArray, true), &quot;application/json&quot;, s3defaultAcl, function (error, data) {">
				<outline text="console.log (&quot;buildRiversArray: &quot; + s3RiversArrayPath);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function buildAllRivers () { //queue up tasks to build each of the river.js files">
			<outline isComment="true" text="Changes">
				<outline text="6/6/14; 6:14:01 PM by DW">
					<outline text="Previously we weren't passing the value of serverData.prefs.flSkipDuplicateTitles to buildOneRiver. Now we pass all the params."></outline>
					</outline>
				</outline>
			<outline text="for (var i = 0; i &lt; serverData.stats.listNames.length; i++) { ">
				<outline text="var listname = &quot;\&quot;&quot; + serverData.stats.listNames [i] + &quot;\&quot;&quot;;"></outline>
				<outline text="var flskip = serverData.prefs.flSkipDuplicateTitles;"></outline>
				<outline text="var s = &quot;buildOneRiver (&quot; + listname + &quot;, true, &quot; + flskip + &quot;, true);&quot;;"></outline>
				<outline text="qAddTask (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="whenLastRiversBuild = new Date (); //8/6/14 by DW"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getAppModDate (callback) { //8/21/15 by DW">
			<outline text="fs.exists (fnameApp, function (flExists) {">
				<outline text="if (flExists) {">
					<outline text="fs.stat (fnameApp, function (err, stats) {">
						<outline text="if (err) {">
							<outline text="callback (undefined);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="callback (new Date (stats.mtime).toString ());"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyQuarterSecond () {">
			<outline text="if (serverData.prefs.enabled) {">
				<outline text="if (countHttpSockets () &lt; serverData.prefs.maxThreads) {">
					<outline text="qRunNextTask ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyFiveMinutes () {">
			<outline isComment="true" text="Changes">
				<outline text="8/6/14; 10:21:01 AM by DW">
					<outline text="Previously, we would load the lists from the folder every minute (due to a bug, the intention was to load them every 15 minutes). If we were building rivers at the same time, this would screw things up pretty badly. Now we read the lsts long after we build the rivers, so they can't interfere, unless it takes more than 5 minutes to read the lists (in which case other things are pretty screwed up, this will be the least of your problems)."></outline>
					</outline>
				</outline>
			<outline text="if (serverData.prefs.enabled) {">
				<outline text="buildAllRivers ();"></outline>
				<outline text="buildRiversArray ();"></outline>
				<outline isComment="true" text="copyIndexFile (); //6/1/14 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyMinute () {">
			<outline text="try {">
				<outline text="var now = new Date (), enabledMessage = &quot;&quot;;"></outline>
				<outline text="serverData.stats.ctHttpSockets = countHttpSockets (); "></outline>
				<outline text="serverData.stats.ctMinutes++;"></outline>
				<outline text=""></outline>
				<outline text="renewNextSubscription (); //6/4/15 by DW"></outline>
				<outline text="writeLocalStorageIfChanged (); //6/20/15 by DW"></outline>
				<outline text=""></outline>
				<outline text="if (!serverData.prefs.enabled) { //12/4/14 by DW">
					<outline text="enabledMessage = &quot; server is not enabled.&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="console.log (&quot;\neveryMinute: &quot; + now.toLocaleTimeString () + &quot;, &quot; + qSize () + &quot; items on the task queue, &quot; + serverData.stats.ctHttpSockets  + &quot; sockets open, &quot; + feedsArray.length + &quot; feeds.&quot; + enabledMessage + &quot; v&quot; + myVersion);"></outline>
				<outline text=""></outline>
				<outline text="clearBuildRiverCache ();"></outline>
				<outline text=""></outline>
				<outline text="if (serverData.prefs.enabled) {">
					<outline text="if (flHaveServerData) {">
						<outline text="//check for hour rollover">
							<outline text="if (now.getHours () != whenLastEveryMinute.getHours ()) {">
								<outline text="serverData.stats.ctFeedReadsLastHour = 0;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="whenLastEveryMinute = now;"></outline>
							</outline>
						<outline text="saveServerData ();"></outline>
						<outline text=""></outline>
						<outline text="if (flRiverDirty) {">
							<outline text="saveTodaysRiver ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="checkRiverRollover ();"></outline>
						<outline text=""></outline>
						<outline text="if (flFeedsArrayDirty) {">
							<outline text="saveFeedsArray ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (flFeedsInListsDirty) {">
							<outline text="saveFeedsInLists ();"></outline>
							<outline text="flFeedsInListsDirty = false;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text=""></outline>
						<outline text="if (utils.secondsSince (whenLastRiversBuild) &gt;= 59) { //8/6/14 by DW">
							<outline text="loadListsFromFolder ();"></outline>
							<outline text="flFeedsInListsDirty = true;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="catch (err) {">
				<outline created="Mon, 25 Nov 2013 17:11:59 GMT" pgfnum="32255" text="console.log (&quot;everyMinute, error == &quot; + err.message);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text=""></outline>
			<outline isComment="true" text="utils.sleepTillTopOfMinute (everyMinute);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everySecond () {">
			<outline text="if (!flScheduledEveryMinute) { //8/22/15 by DW">
				<outline text="if (new Date ().getSeconds () == 0) {">
					<outline text="setInterval (everyMinute, 60000); "></outline>
					<outline text="setInterval (everyFiveMinutes, 300000); "></outline>
					<outline text="flScheduledEveryMinute = true;"></outline>
					<outline text="everyMinute (); //it's the top of the minute, we have to do one now"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flWatchAppDateChange) { //8/21/15 by DW">
				<outline text="getAppModDate (function (theModDate) {">
					<outline text="if (theModDate != origAppModDate) {">
						<outline isComment="true" text="console.log (&quot;everySecond: &quot; + theModDate + &quot; != &quot; + origAppModDate);"></outline>
						<outline text="console.log (&quot;everySecond: &quot; + fnameApp + &quot; has been updated. &quot; + myProductName + &quot; is quitting now.&quot;);"></outline>
						<outline text="process.exit (0);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (serverData.prefs.enabled) {">
				<outline text="var ct = serverData.prefs.ctReadsPerSecond;"></outline>
				<outline text="for (var i = 0; i &lt; ct; i++) {">
					<outline text="if (countHttpSockets () &lt;= serverData.prefs.maxThreads) {">
						<outline text="var feedstats = findNextFeedToRead ();"></outline>
						<outline text="if (feedstats !== undefined) { //a feed is ready to read">
							<outline text="readFeed (feedstats.url);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="} "></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function handleRequest (httpRequest, httpResponse) {">
			<outline text="function writeHead (type) {">
				<outline text="if (type == undefined) {">
					<outline text="type = &quot;text/plain&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: type, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function respondWithObject (obj) {">
				<outline text="writeHead (&quot;application/json&quot;);"></outline>
				<outline text="httpResponse.end (utils.jsonStringify (obj));    "></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Tue, 29 Apr 2014 21:25:20 GMT" pgfnum="40664" text="try {">
				<outline created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078" text="var parsedUrl = urlpack.parse (httpRequest.url, true), now = new Date (), startTime = now;"></outline>
				<outline text="var lowerpath = parsedUrl.pathname.toLowerCase (), host, port = 80, flLocalRequest = false;"></outline>
				<outline text=""></outline>
				<outline text="//set host, port, flLocalRequest">
					<outline text="host = httpRequest.headers.host;"></outline>
					<outline text="if (utils.stringContains (host, &quot;:&quot;)) {">
						<outline text="port = utils.stringNthField (host, &quot;:&quot;, 2);"></outline>
						<outline text="host = utils.stringNthField (host, &quot;:&quot;, 1);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="flLocalRequest = utils.beginsWith (host, &quot;localhost&quot;);"></outline>
					</outline>
				<outline text="//show the request on the console">
					<outline text="var localstring = &quot;&quot;;"></outline>
					<outline text="if (flLocalRequest) {">
						<outline text="localstring = &quot;* &quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="console.log (localstring + httpRequest.method + &quot; &quot; + host + &quot;:&quot; + port + &quot; &quot; + lowerpath);"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="//stats">
					<outline text="serverData.stats.ctHits++;"></outline>
					<outline text="serverData.stats.ctHitsToday++;"></outline>
					<outline text="serverData.stats.ctHitsThisRun++;"></outline>
					</outline>
				<outline created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803" text="switch (httpRequest.method) {">
					<outline created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807" text="case &quot;GET&quot;:">
						<outline text="switch (lowerpath) {">
							<outline text="case &quot;/&quot;: //7/4/15 by DW">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/html&quot;});"></outline>
								<outline text="request (urlServerHomePageSource, function (error, response, htmltext) {">
									<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
										<outline text="httpResponse.end (htmltext);    "></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/version&quot;:">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (myVersion);    "></outline>
								<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
								</outline>
							<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/now&quot;:">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (now.toString ());    "></outline>
								<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
								</outline>
							<outline created="Tue, 11 Feb 2014 15:52:21 GMT" pgfnum="37399" text="case &quot;/status&quot;: ">
								<outline created="Wed, 12 Feb 2014 16:07:40 GMT" pgfnum="37578" text="var myStatus = {">
									<outline created="Wed, 12 Feb 2014 16:07:53 GMT" pgfnum="37579" text="version: myVersion, "></outline>
									<outline created="Wed, 12 Feb 2014 16:08:01 GMT" pgfnum="37580" text="now: now.toUTCString (), "></outline>
									<outline created="Wed, 12 Feb 2014 16:08:04 GMT" pgfnum="37581" text="whenServerStart: whenServerStart.toUTCString (), "></outline>
									<outline text="s3Path: s3path, //7/31/14 by DW"></outline>
									<outline text="port: myPort, //7/31/14 by DW"></outline>
									<outline text="defaultAcl: s3defaultAcl, //7/31/14 by DW"></outline>
									<outline created="Wed, 12 Feb 2014 16:08:10 GMT" pgfnum="37582" text="hits: serverData.stats.ctHits, "></outline>
									<outline created="Wed, 12 Feb 2014 16:08:14 GMT" pgfnum="37583" text="hitsToday: serverData.stats.ctHitsToday,"></outline>
									<outline text="hitsThisRun: serverData.stats.ctHitsThisRun"></outline>
									<outline created="Wed, 12 Feb 2014 16:08:19 GMT" pgfnum="37584" text="};"></outline>
									</outline>
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (utils.jsonStringify (myStatus, true));    "></outline>
								<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
								</outline>
							<outline text="case &quot;/serverdata&quot;:">
								<outline text="updateStatsBeforeSave ();"></outline>
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (utils.jsonStringify (serverData.stats, true));    "></outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/feedstats&quot;:">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (utils.jsonStringify (feedsArray, true));    "></outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/buildallrivers&quot;:">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="if (serverData.prefs.enabled) {">
									<outline text="buildAllRivers ();"></outline>
									<outline text="httpResponse.end (&quot;Your rivers are building sir or madam.&quot;);    "></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="httpResponse.end (&quot;Can't build the rivers because serverData.prefs.enabled is false.&quot;);    "></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/loadlists&quot;:">
								<outline text="loadListsFromFolder ();"></outline>
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (&quot;We're reading the lists, right now, as we speak.&quot;);    "></outline>
								</outline>
							<outline text="case &quot;/dashboard&quot;: //6/2/14 by DW">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/html&quot;});"></outline>
								<outline text="request (urlDashboardSource, function (error, response, htmltext) {">
									<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
										<outline text="httpResponse.end (htmltext);    "></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline created="Thu, 31 Jul 2014 16:34:56 GMT" pgfnum="43058" text="case &quot;/ping&quot;: //9/11/14 by DW">
								<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var url = parsedUrl.query.url;"></outline>
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="if (findInFeedsArray (url) == undefined) {">
									<outline text="httpResponse.end (&quot;Ping received, but we're not following this feed. Sorry.&quot;);    "></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="httpResponse.end (&quot;Ping received, will read asap.&quot;);    "></outline>
									<outline text="readFeed (url);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
								</outline>
							<outline text="case &quot;/getlistnames&quot;: //11/11/14 by DW">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (utils.jsonStringify (serverData.stats.listNames));    "></outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/getalllists&quot;: //11/11/14 by DW">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="getAllLists (function (theLists) {">
									<outline text="httpResponse.end (utils.jsonStringify (theLists));    "></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/getonefeed&quot;: //11/26/14 by DW">
								<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var url = parsedUrl.query.url;"></outline>
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="getOneFeed (url, function (theFeed) {">
									<outline text="httpResponse.end (utils.jsonStringify (theFeed));    "></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/getoneriver&quot;: //11/28/14 by DW ">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="getOneRiver (parsedUrl.query.fname, function (s) {">
									<outline text="httpResponse.end (s);    "></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/getfeedmeta&quot;: //12/1/14 by DW -- for the list editor, just get the metadata about the feed">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="getFeedMetadata (parsedUrl.query.url, function (data) {">
									<outline text="if (data == undefined) {">
										<outline text="httpResponse.end (&quot;&quot;);    "></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="httpResponse.end (utils.jsonStringify (data));    "></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/readfile&quot;: //12/1/14 by DW">
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpReadUrl (parsedUrl.query.url, function (s) {">
									<outline text="if (s == undefined) {">
										<outline text="httpResponse.end (&quot;&quot;);    "></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="httpResponse.end (s);    "></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="break;"></outline>
								</outline>
							<outline text="case &quot;/getprefs&quot;: //12/1/14 by DW">
								<outline text="respondWithObject (serverData.prefs);"></outline>
								<outline text="break;"></outline>
								</outline>
							<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/feedupdated&quot;: //6/4/15 by DW">
								<outline created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413" text="var challenge = parsedUrl.query.challenge;"></outline>
								<outline text="console.log (&quot;/feedupdated: challenge == &quot; + challenge);"></outline>
								<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});"></outline>
								<outline text="httpResponse.end (challenge);    "></outline>
								<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
								</outline>
							<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/favicon.ico&quot;: //7/19/15 by DW">
								<outline text="httpResponse.writeHead (302, {&quot;location&quot;: urlFavicon, &quot;Content-Type&quot;: &quot;text/plain&quot;});"></outline>
								<outline text="httpResponse.end (&quot;302 REDIRECT&quot;);    "></outline>
								<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
								</outline>
							<outline created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084" text="default: //404 not found">
								<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (&quot;\&quot;&quot; + lowerpath + &quot;\&quot; is not one of the endpoints defined by this server.&quot;);"></outline>
								</outline>
							<outline created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830" text="}"></outline>
							</outline>
						<outline created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808" text="break;"></outline>
						</outline>
					<outline created="Thu, 01 May 2014 20:42:24 GMT" pgfnum="40805" text="case &quot;POST&quot;: //12/2/14 by DW">
						<outline text="var body = &quot;&quot;;"></outline>
						<outline text="httpRequest.on (&quot;data&quot;, function (data) {">
							<outline text="body += data;"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="httpRequest.on (&quot;end&quot;, function () {">
							<outline text="var flPostAllowed = false;"></outline>
							<outline text=""></outline>
							<outline text="//set flPostAllowed -- 12/4/14 by DW">
								<outline text="if (flLocalRequest) {">
									<outline text="flPostAllowed = true;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="if (lowerpath == &quot;/feedupdated&quot;) {">
										<outline text="flPostAllowed = true;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="if (remotePassword.length &gt; 0) { //must have password set">
											<outline text="flPostAllowed = (parsedUrl.query.password === remotePassword);"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="if (flPostAllowed) {">
								<outline text="console.log (&quot;POST body length: &quot; + body.length);"></outline>
								<outline created="Thu, 01 May 2014 21:24:18 GMT" pgfnum="40824" text="switch (lowerpath) {">
									<outline text="case &quot;/setprefs&quot;: ">
										<outline text="var newprefs = JSON.parse (body);"></outline>
										<outline text="for (var x in newprefs) {">
											<outline text="serverData.prefs [x] = newprefs [x];"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="saveServerData ();"></outline>
										<outline text="respondWithObject ({});"></outline>
										<outline text="break;"></outline>
										</outline>
									<outline text="case &quot;/savelist&quot;: ">
										<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
										<outline text="saveSubscriptionList (parsedUrl.query.listname, body);"></outline>
										<outline text="httpResponse.end (&quot;&quot;);    "></outline>
										<outline text="break;"></outline>
										</outline>
									<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/feedupdated&quot;: //6/4/15 by DW">
										<outline text="var postbody = qs.parse (body);"></outline>
										<outline text="rssCloudFeedUpdated (postbody.url);"></outline>
										<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});"></outline>
										<outline text="httpResponse.end (&quot;Thanks for the update! :-)&quot;);    "></outline>
										<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
										</outline>
									<outline created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084" text="default: //404 not found">
										<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
										<outline text="httpResponse.end (&quot;\&quot;&quot; + lowerpath + &quot;\&quot; is not one of the endpoints defined by this server.&quot;);"></outline>
										</outline>
									<outline created="Thu, 01 May 2014 21:24:25 GMT" pgfnum="40827" text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="httpResponse.writeHead (403, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (&quot;This feature can only be accessed locally.&quot;);    "></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline created="Thu, 01 May 2014 20:42:37 GMT" pgfnum="40806" text="break;"></outline>
						</outline>
					<outline created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804" text="}"></outline>
					</outline>
				<outline created="Tue, 29 Apr 2014 21:25:26 GMT" pgfnum="40668" text="}"></outline>
				</outline>
			<outline created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669" text="catch (tryError) {">
				<outline text="httpResponse.writeHead (503, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
				<outline text="httpResponse.end (tryError.message);    "></outline>
				<outline created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670" text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function loadConfig (callback) { //5/9/15 by DW">
			<outline isComment="true" text="Changes">
				<outline text="5/9/15; 4:01:53 PM by DW">
					<outline text="Items read from the config file take precedence over environment variables. "></outline>
					</outline>
				</outline>
			<outline text="fs.readFile (fnameConfig, function (err, data) {">
				<outline text="if (!err) {">
					<outline text="var config = JSON.parse (data.toString ());"></outline>
					<outline text="if (config.enabled !== undefined) {">
						<outline text="flEnabled = utils.getBoolean (config.enabled);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.fspath !== undefined) {">
						<outline text="fspath = config.fspath;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.password !== undefined) {">
						<outline text="remotePassword = config.password;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.s3path !== undefined) {">
						<outline text="s3path = config.s3path;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.PORT !== undefined) {">
						<outline text="myPort = config.PORT;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline isComment="true" text="if (config.flWatchForQuitFile !== undefined) { //8/20/15 by DW">
						<outline text="flWatchForQuitFile = utils.getBoolean (config.flWatchForQuitFile);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="if (config.flWatchAppDateChange !== undefined) { //8/21/15 by DW">
						<outline text="flWatchAppDateChange = utils.getBoolean (config.flWatchAppDateChange);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (config.fnameApp !== undefined) { //8/21/15 by DW">
						<outline text="fnameApp = config.fnameApp;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="if (config.s3defaultAcl !== s3defaultAcl) {">
						<outline text="s3defaultAcl = config.s3defaultAcl;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="appConfig = config; //6/4/15 by DW"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function startup () {">
			<outline text="if (process.env.s3defaultAcl !== undefined) { //7/19/14 by DW">
				<outline text="s3defaultAcl = process.env.s3defaultAcl;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="loadConfig (function () {">
				<outline text="if ((s3path === undefined) &amp;&amp; (fspath === undefined)) { //7/19/15 by DW">
					<outline text="fspath = &quot;river4data/&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (fspath !== undefined) { //9/24/14 by DW">
					<outline text="s3path = fspath; "></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="//display startup message">
					<outline text="var pathmsg = (fspath === undefined) ? (&quot;s3 path == &quot; + s3path) : (&quot;file path == &quot; + fspath);"></outline>
					<outline created="Mon, 03 Feb 2014 18:54:58 GMT" pgfnum="36999" text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + myPort + &quot;, &quot; + pathmsg);"></outline>
					</outline>
				<outline text="if (remotePassword === undefined) { //12/4/14 by DW">
					<outline text="remotePassword = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="s3UserListsPath = s3path + &quot;lists/&quot;; //where users store their lists"></outline>
				<outline text="s3UserRiversPath = s3path + &quot;rivers/&quot;; //where we store their rivers"></outline>
				<outline text="s3PrefsAndStatsPath = s3path + &quot;data/prefsAndStats.json&quot;;"></outline>
				<outline text="s3LocalStoragePath = s3path + &quot;data/localStorage.json&quot;; //6/22/15 by DW"></outline>
				<outline text="s3FeedsArrayPath = s3path + &quot;data/feedsStats.json&quot;;"></outline>
				<outline text="s3RiversArrayPath = s3path + &quot;data/riversArray.json&quot;;"></outline>
				<outline text="s3FeedsInListsPath = s3path + &quot;data/feedsInLists.json&quot;;"></outline>
				<outline text="s3FeedsDataFolder = s3path + &quot;data/feeds/&quot;;"></outline>
				<outline text="s3CalendarDataFolder = s3path + &quot;data/calendar/&quot;;"></outline>
				<outline text="s3BackupsFolder = s3path + &quot;data/backups/&quot;; //12/4/14 by DW"></outline>
				<outline text="s3ListsDataFolder = s3path + &quot;data/lists/&quot;;"></outline>
				<outline text="s3IndexFile = s3path + &quot;index.html&quot;;"></outline>
				<outline text=""></outline>
				<outline text="getAppModDate (function (appModDate) { //set origAppModDate -- 8/21/15 by DW">
					<outline text="origAppModDate = appModDate;"></outline>
					<outline isComment="true" text="console.log (&quot;startup: origAppModDate == &quot; + origAppModDate);"></outline>
					<outline text="loadServerData (function () {">
						<outline text="applyPrefs ();"></outline>
						<outline isComment="true" text="copyIndexFile (); //6/1/14 by DW"></outline>
						<outline text=""></outline>
						<outline isComment="true" text="s3stats = serverData.stats.s3stats; //commented out for debugging"></outline>
						<outline text=""></outline>
						<outline text="saveServerData (); //so hours-server-up stats update immediately"></outline>
						<outline text=""></outline>
						<outline text="loadFeedsArray (function () {">
							<outline text="loadLocalStorage (function () { //6/20/15 by DW">
								<outline text="loadTodaysRiver (function () {">
									<outline text="loadListsFromFolder (); //adds tasks to the queue"></outline>
									<outline text="//make sure all the top level folders are created -- 7/19/15 by DW">
										<outline text="if (fspath !== undefined) {">
											<outline text="fsSureFilePath (s3UserRiversPath, function () {">
												<outline text="fsSureFilePath (s3UserListsPath, function () {">
													<outline text="});"></outline>
													</outline>
												<outline text="});"></outline>
												</outline>
											<outline text="}"></outline>
											</outline>
										</outline>
									<outline text="http.createServer (handleRequest).listen (myPort);"></outline>
									<outline text="setInterval (everyQuarterSecond, 250);"></outline>
									<outline text="setInterval (everySecond, 1000); "></outline>
									<outline text="everyMinute (); //do one immediately on startup"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="startup ();"></outline>
		</body>
	</opml>
