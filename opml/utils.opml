<?xml encoding="ISO-8859-1" version="1.0"?>
<!-- OPML generated by OPML Editor v0.75 on 8/26/15; 3:56:06 PM -->
<opml version="2.0">
	<head>
		<title>utils.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="utils.js">
		<outline created="Tue, 15 Jan 2013 00:24:33 GMT" pgfnum="17115" text="function sameDay (d1, d2) { ">
			<outline created="Tue, 29 Jan 2013 19:16:02 GMT" pgfnum="17889" text="//returns true if the two dates are on the same day"></outline>
			<outline created="Tue, 15 Jan 2013 00:45:10 GMT" pgfnum="17126" text="d1 = new Date (d1);"></outline>
			<outline created="Tue, 15 Jan 2013 00:45:10 GMT" pgfnum="17126" text="d2 = new Date (d2);"></outline>
			<outline text="return ((d1.getFullYear () == d2.getFullYear ()) &amp;&amp; (d1.getMonth () == d2.getMonth ()) &amp;&amp; (d1.getDate () == d2.getDate ()));"></outline>
			<outline created="Mon, 03 Feb 2014 18:49:54 GMT" pgfnum="36998" text="}"></outline>
			</outline>
		<outline text="function dayGreaterThanOrEqual (d1, d2) { //9/2/14 by DW">
			<outline created="Tue, 15 Jan 2013 00:45:10 GMT" pgfnum="17126" text="d1 = new Date (d1);"></outline>
			<outline text="d1.setHours (0);"></outline>
			<outline text="d1.setMinutes (0);"></outline>
			<outline text="d1.setSeconds (0);"></outline>
			<outline text=""></outline>
			<outline created="Tue, 15 Jan 2013 00:45:10 GMT" pgfnum="17126" text="d2 = new Date (d2);"></outline>
			<outline text="d2.setHours (0);"></outline>
			<outline text="d2.setMinutes (0);"></outline>
			<outline text="d2.setSeconds (0);"></outline>
			<outline text=""></outline>
			<outline text="return (d1 &gt;= d2);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Thu, 30 Jan 2014 02:37:47 GMT" pgfnum="36557" text="function stringLower (s) {">
			<outline text="if (s === undefined) { //1/26/15 by DW">
				<outline text="return (&quot;&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="s = s.toString (); //1/26/15 by DW"></outline>
			<outline created="Thu, 30 Jan 2014 02:37:52 GMT" pgfnum="36558" text="return (s.toLowerCase ());"></outline>
			<outline created="Thu, 30 Jan 2014 02:38:01 GMT" pgfnum="36559" text="}"></outline>
			</outline>
		<outline created="Fri, 01 Feb 2013 22:40:26 GMT" pgfnum="18084" text="function secondsSince (when) { ">
			<outline created="Fri, 01 Feb 2013 00:33:21 GMT" pgfnum="18031" text="var now = new Date ();"></outline>
			<outline text="when = new Date (when);"></outline>
			<outline created="Fri, 01 Feb 2013 22:41:19 GMT" pgfnum="18089" text="return ((now - when) / 1000);"></outline>
			<outline created="Mon, 24 Feb 2014 15:51:02 GMT" pgfnum="37929" text="}"></outline>
			</outline>
		<outline created="Thu, 06 Jun 2013 19:04:01 GMT" pgfnum="25297" text="function padWithZeros (num, ctplaces) { ">
			<outline created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301" text="var s = num.toString ();"></outline>
			<outline created="Thu, 06 Jun 2013 19:04:23 GMT" pgfnum="25299" text="while (s.length &lt; ctplaces) {">
				<outline created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302" text="s = &quot;0&quot; + s;"></outline>
				<outline created="Thu, 06 Jun 2013 19:04:43 GMT" pgfnum="25300" text="}"></outline>
				</outline>
			<outline created="Thu, 06 Jun 2013 19:12:58 GMT" pgfnum="25311" text="return (s);"></outline>
			<outline created="Thu, 06 Jun 2013 19:04:11 GMT" pgfnum="25298" text="}"></outline>
			</outline>
		<outline created="Wed, 24 Jul 2013 15:22:40 GMT" pgfnum="28194" text="function getDatePath (theDate, flLastSeparator) {">
			<outline created="Wed, 24 Jul 2013 15:23:15 GMT" pgfnum="28196" text="if (theDate === undefined) {">
				<outline created="Wed, 24 Jul 2013 15:23:26 GMT" pgfnum="28197" text="theDate = new Date ();"></outline>
				<outline created="Wed, 24 Jul 2013 15:23:28 GMT" pgfnum="28198" text="}"></outline>
				</outline>
			<outline text="else {">
				<outline created="Wed, 24 Jul 2013 15:23:26 GMT" pgfnum="28197" text="theDate = new Date (theDate); //8/12/14 by DW -- make sure it's a date type"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Wed, 24 Jul 2013 15:23:15 GMT" pgfnum="28196" text="if (flLastSeparator === undefined) {">
				<outline created="Wed, 24 Jul 2013 15:23:26 GMT" pgfnum="28197" text="flLastSeparator = true;"></outline>
				<outline created="Wed, 24 Jul 2013 15:23:28 GMT" pgfnum="28198" text="}"></outline>
				</outline>
			<outline created="Wed, 24 Jul 2013 15:29:13 GMT" pgfnum="28201" text=""></outline>
			<outline created="Fri, 15 Jun 2007 22:48:17 GMT" text="var month = padWithZeros (theDate.getMonth () + 1, 2);"></outline>
			<outline created="Fri, 15 Jun 2007 22:48:17 GMT" text="var day = padWithZeros (theDate.getDate (), 2);"></outline>
			<outline created="Wed, 24 Jul 2013 15:27:43 GMT" pgfnum="28199" text="var year = theDate.getFullYear ();"></outline>
			<outline created="Wed, 24 Jul 2013 15:28:02 GMT" pgfnum="28200" text=""></outline>
			<outline text="if (flLastSeparator) {">
				<outline created="Fri, 15 Jun 2007 22:46:16 GMT" text="return (year + &quot;/&quot; + month + &quot;/&quot; + day + &quot;/&quot;);"></outline>
				<outline created="Wed, 24 Jul 2013 15:29:47 GMT" pgfnum="28202" text="}"></outline>
				</outline>
			<outline text="else {">
				<outline created="Fri, 15 Jun 2007 22:46:16 GMT" text="return (year + &quot;/&quot; + month + &quot;/&quot; + day);"></outline>
				<outline created="Wed, 24 Jul 2013 15:29:58 GMT" pgfnum="28203" text="}"></outline>
				</outline>
			<outline created="Wed, 24 Jul 2013 15:23:09 GMT" pgfnum="28195" text="}"></outline>
			</outline>
		<outline text="function multipleReplaceAll (s, adrTable, flCaseSensitive, startCharacters, endCharacters) { ">
			<outline text="if(flCaseSensitive===undefined){">
				<outline text="flCaseSensitive = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if(startCharacters===undefined){">
				<outline text="startCharacters=&quot;&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if(endCharacters===undefined){">
				<outline text="endCharacters=&quot;&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="for( var item in adrTable){">
				<outline text="var replacementValue = adrTable[item];"></outline>
				<outline text="var regularExpressionModifier = &quot;g&quot;;"></outline>
				<outline text="if(!flCaseSensitive){">
					<outline text="regularExpressionModifier = &quot;gi&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var regularExpressionString = (startCharacters+item+endCharacters).replace(/([.?*+^$[\]\\(){}|-])/g, &quot;\\$1&quot;);"></outline>
				<outline text="var regularExpression = new RegExp(regularExpressionString, regularExpressionModifier);"></outline>
				<outline text="s = s.replace(regularExpression, replacementValue);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return s;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 27 Nov 2013 21:58:15 GMT" pgfnum="32470" text="function endsWith (s, possibleEnding, flUnicase) {">
			<outline created="Wed, 01 Jan 2014 23:29:44 GMT" pgfnum="35184" text="if ((s === undefined) || (s.length == 0)) { ">
				<outline created="Wed, 01 Jan 2014 23:29:49 GMT" pgfnum="35185" text="return (false);"></outline>
				<outline created="Wed, 01 Jan 2014 23:29:52 GMT" pgfnum="35186" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 22:09:56 GMT" pgfnum="32496" text="var ixstring = s.length - 1;"></outline>
			<outline created="Wed, 27 Nov 2013 21:59:59 GMT" pgfnum="32482" text="if (flUnicase === undefined) {">
				<outline created="Wed, 27 Nov 2013 22:00:10 GMT" pgfnum="32483" text="flUnicase = true;"></outline>
				<outline created="Wed, 27 Nov 2013 22:00:14 GMT" pgfnum="32484" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 22:00:49 GMT" pgfnum="32485" text="if (flUnicase) {">
				<outline created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476" text="for (var i = possibleEnding.length - 1; i &gt;= 0; i--) {">
					<outline created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478" text="if (stringLower (s [ixstring--]) != stringLower (possibleEnding [i])) {">
						<outline created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479" text="return (false);"></outline>
						<outline created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480" text="}"></outline>
						</outline>
					<outline created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:00:58 GMT" pgfnum="32486" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 22:01:08 GMT" pgfnum="32487" text="else {">
				<outline created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476" text="for (var i = possibleEnding.length - 1; i &gt;= 0; i--) {">
					<outline created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478" text="if (s [ixstring--] != possibleEnding [i]) {">
						<outline created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479" text="return (false);"></outline>
						<outline created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480" text="}"></outline>
						</outline>
					<outline created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:01:15 GMT" pgfnum="32488" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 21:59:44 GMT" pgfnum="32481" text="return (true);"></outline>
			<outline created="Wed, 27 Nov 2013 21:58:43 GMT" pgfnum="32475" text="}"></outline>
			</outline>
		<outline text="function stringContains (s, whatItMightContain, flUnicase) { //11/9/14 by DW">
			<outline text="if (flUnicase === undefined) {">
				<outline text="flUnicase = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flUnicase) {">
				<outline text="s = s.toLowerCase ();"></outline>
				<outline text="whatItMightContain = whatItMightContain.toLowerCase ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s.indexOf (whatItMightContain) != -1);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 27 Nov 2013 21:58:15 GMT" pgfnum="32470" text="function beginsWith (s, possibleBeginning, flUnicase) { ">
			<outline text="if (s === undefined) { //7/15/15 by DW">
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Wed, 01 Jan 2014 23:29:44 GMT" pgfnum="35184" text="if (s.length == 0) { //1/1/14 by DW">
				<outline created="Wed, 01 Jan 2014 23:29:49 GMT" pgfnum="35185" text="return (false);"></outline>
				<outline created="Wed, 01 Jan 2014 23:29:52 GMT" pgfnum="35186" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 21:59:59 GMT" pgfnum="32482" text="if (flUnicase === undefined) {">
				<outline created="Wed, 27 Nov 2013 22:00:10 GMT" pgfnum="32483" text="flUnicase = true;"></outline>
				<outline created="Wed, 27 Nov 2013 22:00:14 GMT" pgfnum="32484" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 22:00:49 GMT" pgfnum="32485" text="if (flUnicase) {">
				<outline created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476" text="for (var i = 0; i &lt; possibleBeginning.length; i++) {">
					<outline created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478" text="if (stringLower (s [i]) != stringLower (possibleBeginning [i])) {">
						<outline created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479" text="return (false);"></outline>
						<outline created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480" text="}"></outline>
						</outline>
					<outline created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:00:58 GMT" pgfnum="32486" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 22:01:08 GMT" pgfnum="32487" text="else {">
				<outline created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476" text="for (var i = 0; i &lt; possibleBeginning.length; i++) {">
					<outline created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478" text="if (s [i] != possibleBeginning [i]) {">
						<outline created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479" text="return (false);"></outline>
						<outline created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480" text="}"></outline>
						</outline>
					<outline created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477" text="}"></outline>
					</outline>
				<outline created="Wed, 27 Nov 2013 22:01:15 GMT" pgfnum="32488" text="}"></outline>
				</outline>
			<outline created="Wed, 27 Nov 2013 21:59:44 GMT" pgfnum="32481" text="return (true);"></outline>
			<outline created="Wed, 27 Nov 2013 21:58:43 GMT" pgfnum="32475" text="}"></outline>
			</outline>
		<outline created="Wed, 23 Jan 2013 15:16:34 GMT" pgfnum="17539" text="function isAlpha (ch) {">
			<outline created="Wed, 23 Jan 2013 15:17:06 GMT" pgfnum="17541" text="return (((ch &gt;= 'a') &amp;&amp; (ch &lt;= 'z')) || ((ch &gt;= 'A') &amp;&amp; (ch &lt;= 'Z')));"></outline>
			<outline created="Mon, 20 Jan 2014 04:13:24 GMT" pgfnum="35962" text="}"></outline>
			</outline>
		<outline created="Wed, 22 Jan 2014 15:27:48 GMT" pgfnum="36287" text="function isNumeric (ch) {">
			<outline created="Wed, 22 Jan 2014 15:27:56 GMT" pgfnum="36289" text="return ((ch &gt;= '0') &amp;&amp; (ch &lt;= '9'));"></outline>
			<outline created="Wed, 22 Jan 2014 15:27:53 GMT" pgfnum="36288" text="}"></outline>
			</outline>
		<outline created="Mon, 11 Mar 2013 02:40:24 GMT" pgfnum="20129" text="function trimLeading (s, ch) {">
			<outline text="while (s.charAt (0) === ch) {">
				<outline text="s = s.substr (1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Mon, 11 Mar 2013 02:43:18 GMT" pgfnum="20133" text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Mon, 11 Mar 2013 02:40:24 GMT" pgfnum="20129" text="function trimTrailing (s, ch) { ">
			<outline text="while (s.charAt (s.length - 1) === ch) {">
				<outline text="s = s.substr (0, s.length - 1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Mon, 11 Mar 2013 02:43:18 GMT" pgfnum="20133" text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Mon, 11 Mar 2013 02:50:58 GMT" pgfnum="20134" text="function trimWhitespace (s) { //rewrite -- 5/30/14 by DW">
			<outline text="function isWhite (ch) {">
				<outline text="switch (ch) {">
					<outline text="case &quot; &quot;: case &quot;\r&quot;: case &quot;\n&quot;: case &quot;\t&quot;:">
						<outline text="return (true);"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (false);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (s === undefined) { //9/10/14 by DW">
				<outline text="return (&quot;&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="while (isWhite (s.charAt (0))) {">
				<outline text="s = s.substr (1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="while (s.length &gt; 0) {">
				<outline text="if (!isWhite (s.charAt (0))) {">
					<outline text="break;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="s = s.substr (1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="while (s.length &gt; 0) {">
				<outline text="if (!isWhite (s.charAt (s.length - 1))) {">
					<outline text="break;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="s = s.substr (0, s.length - 1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function addPeriodAtEnd (s) {">
			<outline isComment="true" text="Changes">
				<outline text="5/8/14; 11:02:16 AM by DW">
					<outline text="Call this if you want to add a period at the end of a string, but want to avoid doing it if there already is one, or another punctuation char."></outline>
					</outline>
				</outline>
			<outline text="s = trimWhitespace (s);"></outline>
			<outline text="if (s.length == 0) {">
				<outline text="return (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="switch (s [s.length - 1]) {">
				<outline text="case &quot;.&quot;:"></outline>
				<outline text="case &quot;,&quot;:"></outline>
				<outline text="case &quot;?&quot;:"></outline>
				<outline text="case &quot;\&quot;&quot;:"></outline>
				<outline text="case &quot;'&quot;:"></outline>
				<outline text="case &quot;:&quot;:"></outline>
				<outline text="case &quot;;&quot;:"></outline>
				<outline text="case &quot;!&quot;:">
					<outline text="return (s);"></outline>
					</outline>
				<outline text="default:">
					<outline text="return (s + &quot;.&quot;);"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Thu, 05 Dec 2013 13:36:54 GMT" pgfnum="33203" text="function getBoolean (val) { //12/5/13 by DW">
			<outline created="Thu, 05 Dec 2013 13:53:35 GMT" isComment="true" pgfnum="33230" text="Changes">
				<outline created="Thu, 05 Dec 2013 13:53:37 GMT" pgfnum="33231" text="12/5/13; 8:53:38 AM by DW">
					<outline created="Thu, 05 Dec 2013 13:53:39 GMT" pgfnum="33232" text="Created. Use this to get a boolean value from something that might not be a boolean. "></outline>
					<outline created="Thu, 05 Dec 2013 13:54:18 GMT" pgfnum="33233" text="For example, &quot;false&quot; should be the boolean value false, but in JavaScript, it's true. "></outline>
					<outline created="Thu, 05 Dec 2013 13:54:42 GMT" pgfnum="33234" text="So pass it through this routine to be safe. "></outline>
					</outline>
				</outline>
			<outline created="Thu, 05 Dec 2013 13:38:37 GMT" pgfnum="33207" text="switch (typeof (val)) {">
				<outline created="Thu, 05 Dec 2013 13:38:50 GMT" pgfnum="33209" text="case &quot;string&quot;:">
					<outline created="Thu, 05 Dec 2013 13:39:59 GMT" pgfnum="33215" text="if (val.toLowerCase () == &quot;true&quot;) {">
						<outline created="Thu, 05 Dec 2013 13:40:47 GMT" pgfnum="33219" text="return (true);"></outline>
						<outline created="Thu, 05 Dec 2013 13:40:32 GMT" pgfnum="33216" text="}"></outline>
						</outline>
					<outline created="Thu, 05 Dec 2013 13:40:55 GMT" pgfnum="33220" text="break;"></outline>
					</outline>
				<outline created="Thu, 05 Dec 2013 13:38:57 GMT" pgfnum="33211" text="case &quot;boolean&quot;:">
					<outline created="Thu, 05 Dec 2013 13:41:03 GMT" pgfnum="33221" text="return (val);"></outline>
					</outline>
				<outline created="Thu, 05 Dec 2013 13:39:46 GMT" pgfnum="33213" text="case &quot;number&quot;:">
					<outline created="Thu, 05 Dec 2013 13:41:11 GMT" pgfnum="33222" text="if (val == 1) {">
						<outline created="Thu, 05 Dec 2013 13:41:16 GMT" pgfnum="33223" text="return (true);"></outline>
						<outline created="Thu, 05 Dec 2013 13:41:19 GMT" pgfnum="33224" text="}"></outline>
						</outline>
					<outline created="Thu, 05 Dec 2013 13:39:50 GMT" pgfnum="33214" text="break;"></outline>
					</outline>
				<outline created="Thu, 05 Dec 2013 13:38:45 GMT" pgfnum="33208" text="}"></outline>
				</outline>
			<outline created="Thu, 05 Dec 2013 13:41:34 GMT" pgfnum="33225" text="return (false);"></outline>
			<outline created="Thu, 05 Dec 2013 13:37:02 GMT" pgfnum="33206" text="}"></outline>
			</outline>
		<outline created="Sat, 10 May 2014 02:46:43 GMT" pgfnum="41378" text="function bumpUrlString (s) { //5/10/14 by DW">
			<outline created="Sat, 10 May 2014 21:25:03 GMT" isComment="true" pgfnum="41466" text="Changes">
				<outline created="Sat, 10 May 2014 21:25:05 GMT" pgfnum="41467" text="5/10/14; 5:25:06 PM by DW">
					<outline created="Sat, 10 May 2014 21:25:06 GMT" pgfnum="41468" text="Generate file names suitable for short URL generating. "></outline>
					</outline>
				</outline>
			<outline created="Sat, 10 May 2014 21:25:40 GMT" pgfnum="41469" text="if (s === undefined) {">
				<outline created="Sat, 10 May 2014 21:25:45 GMT" pgfnum="41470" text="s = &quot;0&quot;;"></outline>
				<outline created="Sat, 10 May 2014 21:25:49 GMT" pgfnum="41471" text="}"></outline>
				</outline>
			<outline created="Sat, 10 May 2014 02:47:05 GMT" pgfnum="41383" text="function bumpChar (ch) {">
				<outline created="Sat, 10 May 2014 03:19:41 GMT" pgfnum="41421" text="function num (ch) {">
					<outline created="Sat, 10 May 2014 03:19:55 GMT" pgfnum="41427" text="return (ch.charCodeAt (0));"></outline>
					<outline created="Sat, 10 May 2014 03:19:51 GMT" pgfnum="41426" text="}"></outline>
					</outline>
				<outline created="Sat, 10 May 2014 02:47:13 GMT" pgfnum="41385" text="if ((ch &gt;= &quot;0&quot;) &amp;&amp; (ch &lt;= &quot;8&quot;)) {">
					<outline created="Sat, 10 May 2014 03:00:43 GMT" pgfnum="41411" text="ch = String.fromCharCode (num (ch) + 1);"></outline>
					<outline created="Sat, 10 May 2014 02:47:44 GMT" pgfnum="41386" text="}"></outline>
					</outline>
				<outline created="Sat, 10 May 2014 02:48:17 GMT" pgfnum="41388" text="else {">
					<outline created="Sat, 10 May 2014 02:48:31 GMT" pgfnum="41390" text="if (ch == &quot;9&quot;) {">
						<outline created="Sat, 10 May 2014 02:48:48 GMT" pgfnum="41394" text="ch = &quot;a&quot;;"></outline>
						<outline created="Sat, 10 May 2014 02:48:38 GMT" pgfnum="41391" text="}"></outline>
						</outline>
					<outline created="Sat, 10 May 2014 02:48:39 GMT" pgfnum="41392" text="else {">
						<outline created="Tue, 03 Jun 2008 00:59:01 GMT" text="if ((ch &gt;= &quot;a&quot;) &amp;&amp; (ch &lt;= &quot;y&quot;)) {">
							<outline created="Sat, 10 May 2014 03:00:43 GMT" pgfnum="41411" text="ch = String.fromCharCode (num (ch) + 1);"></outline>
							<outline created="Sat, 10 May 2014 02:49:23 GMT" pgfnum="41395" text="}"></outline>
							</outline>
						<outline created="Tue, 03 Jun 2008 00:59:59 GMT" text="else {">
							<outline created="Tue, 03 Jun 2008 01:00:01 GMT" text="throw &quot;rollover!&quot;;"></outline>
							<outline created="Sat, 10 May 2014 02:49:35 GMT" pgfnum="41396" text="}"></outline>
							</outline>
						<outline created="Sat, 10 May 2014 02:48:41 GMT" pgfnum="41393" text="}"></outline>
						</outline>
					<outline created="Sat, 10 May 2014 02:48:19 GMT" pgfnum="41389" text="}"></outline>
					</outline>
				<outline created="Sat, 10 May 2014 03:06:40 GMT" pgfnum="41414" text="return (ch);"></outline>
				<outline created="Sat, 10 May 2014 02:47:10 GMT" pgfnum="41384" text="}"></outline>
				</outline>
			<outline created="Sat, 10 May 2014 02:50:53 GMT" pgfnum="41398" text="try {">
				<outline created="Tue, 03 Jun 2008 02:57:46 GMT" text="var chlast = bumpChar (s [s.length - 1]);"></outline>
				<outline created="Sat, 10 May 2014 03:10:19 GMT" pgfnum="41415" text="s = s.substr (0, s.length - 1) + chlast;"></outline>
				<outline created="Sat, 10 May 2014 02:53:18 GMT" pgfnum="41402" text="return (s);"></outline>
				<outline created="Sat, 10 May 2014 02:50:55 GMT" pgfnum="41399" text="}"></outline>
				</outline>
			<outline created="Sat, 10 May 2014 02:50:56 GMT" pgfnum="41400" text="catch (tryError) {">
				<outline created="Sat, 10 May 2014 13:11:43 GMT" pgfnum="41447" text="if (s.length == 1) {">
					<outline created="Sat, 10 May 2014 13:11:56 GMT" pgfnum="41452" text="return (&quot;00&quot;);"></outline>
					<outline created="Sat, 10 May 2014 13:11:51 GMT" pgfnum="41451" text="}"></outline>
					</outline>
				<outline created="Sat, 10 May 2014 13:12:08 GMT" pgfnum="41453" text="else {">
					<outline created="Sat, 10 May 2014 13:12:34 GMT" pgfnum="41455" text="s = s.substr (0, s.length - 1);"></outline>
					<outline created="Sat, 10 May 2014 13:13:16 GMT" pgfnum="41456" text="s = bumpUrlString (s) + &quot;0&quot;;"></outline>
					<outline created="Sat, 10 May 2014 13:13:35 GMT" pgfnum="41457" text="return (s);"></outline>
					<outline created="Sat, 10 May 2014 13:12:11 GMT" pgfnum="41454" text="}"></outline>
					</outline>
				<outline created="Sat, 10 May 2014 02:51:11 GMT" pgfnum="41401" text="}"></outline>
				</outline>
			<outline created="Sat, 10 May 2014 02:46:52 GMT" pgfnum="41382" text="}"></outline>
			</outline>
		<outline text="function stringDelete (s, ix, ct) {">
			<outline text="var start = ix - 1;"></outline>
			<outline text="var end = (ix + ct) - 1;"></outline>
			<outline text="var s1 = s.substr (0, start);"></outline>
			<outline text="var s2 = s.substr (end);"></outline>
			<outline text="return (s1 + s2);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Sat, 27 Jul 2013 18:16:06 GMT" pgfnum="28354" text="function replaceAll (s, searchfor, replacewith) {">
			<outline text="function escapeRegExp (string) {">
				<outline text="return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, &quot;\\$1&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s.replace (new RegExp (escapeRegExp (searchfor), 'g'), replacewith));"></outline>
			<outline created="Sat, 27 Jul 2013 18:16:17 GMT" pgfnum="28355" text="}"></outline>
			</outline>
		<outline created="Thu, 25 Jul 2013 21:49:37 GMT" pgfnum="28268" text="function stringCountFields (s, chdelim) {">
			<outline created="Thu, 25 Jul 2013 21:54:58 GMT" pgfnum="28275" text="var ct = 1;"></outline>
			<outline created="Thu, 25 Jul 2013 21:54:45 GMT" pgfnum="28272" text="if (s.length == 0) {">
				<outline created="Thu, 25 Jul 2013 21:54:50 GMT" pgfnum="28273" text="return (0);"></outline>
				<outline created="Thu, 25 Jul 2013 21:54:54 GMT" pgfnum="28274" text="}"></outline>
				</outline>
			<outline created="Thu, 25 Jul 2013 21:50:20 GMT" pgfnum="28270" text="for (var i = 0; i &lt; s.length; i++) {">
				<outline text="if (s [i] == chdelim) {">
					<outline text="ct++;"></outline>
					<outline created="Thu, 25 Jul 2013 21:55:55 GMT" pgfnum="28276" text="}"></outline>
					</outline>
				<outline created="Thu, 25 Jul 2013 21:50:33 GMT" pgfnum="28271" text="}"></outline>
				</outline>
			<outline created="Thu, 25 Jul 2013 21:56:01 GMT" pgfnum="28277" text="return (ct)"></outline>
			<outline created="Thu, 25 Jul 2013 21:49:45 GMT" pgfnum="28269" text="}"></outline>
			</outline>
		<outline text="function stringNthField (s, chdelim, n) {">
			<outline text="var splits = s.split (chdelim);"></outline>
			<outline text="if (splits.length &gt;= n) {">
				<outline text="return splits [n-1];"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (&quot;&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function dateYesterday (d) {">
			<outline text="return (new Date (new Date (d) - (24 * 60 * 60 * 1000)));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stripMarkup (s) { //5/24/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="6/9/14; 11:33:37 AM by DW">
					<outline text="River4 is crashing when we pass null to stripMarkup. So add some defensive driving."></outline>
					</outline>
				</outline>
			<outline text="if ((s === undefined) || (s == null) || (s.length == 0)) {">
				<outline text="return (&quot;&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s.replace (/(&lt;([^&gt;]+)&gt;)/ig, &quot;&quot;));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function maxStringLength (s, len, flWholeWordAtEnd, flAddElipses) {">
			<outline text="if (flWholeWordAtEnd === undefined) {">
				<outline text="flWholeWordAtEnd = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flAddElipses === undefined) { //6/2/14 by DW">
				<outline text="flAddElipses = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (s.length &gt; len) {">
				<outline text="s = s.substr (0, len);"></outline>
				<outline text="if (flWholeWordAtEnd) {">
					<outline text="while (s.length &gt; 0) {">
						<outline text="if (s [s.length - 1] == &quot; &quot;) {">
							<outline text="if (flAddElipses) {">
								<outline text="s += &quot;...&quot;;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="break;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="s = s.substr (0, s.length - 1); //pop last char"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 23 Jan 2013 15:25:16 GMT" pgfnum="17547" text="function random (lower, upper) {">
			<outline created="Wed, 23 Jan 2013 15:33:00 GMT" pgfnum="17559" text="var range = upper - lower + 1;"></outline>
			<outline text="return (Math.floor ((Math.random () * range) + lower));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function removeMultipleBlanks (s) { //7/30/14 by DW">
			<outline text="return (s.toString().replace (/ +/g, &quot; &quot;));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function jsonStringify (jstruct) { //7/19/14 by DW">
			<outline text="return (JSON.stringify (jstruct, undefined, 4));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function jsonStringify (jstruct, flFixBreakage) { //7/30/14 by DW">
			<outline text="//Changes">
				<outline text="//6/16/15; 10:43:25 AM by DW">
					<outline text="//Andrew Shell reported an issue in the encoding of JSON that's solved by doing character replacement. "></outline>
					<outline text="//However, this is too big a change to make for all the code that calls this library routine, so we added a boolean flag, flFixBreakage."></outline>
					<outline text="//If this proves to be harmless, we'll change the default to true. "></outline>
					<outline text="//http://river4.smallpict.com/2015/06/16/jsonEncodingIssueSolved.html"></outline>
					</outline>
				</outline>
			<outline text="if (flFixBreakage === undefined) {">
				<outline text="flFixBreakage = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var s = JSON.stringify (jstruct, undefined, 4);"></outline>
			<outline text="if (flFixBreakage) {">
				<outline text="s = s.replace (/\u2028/g,'\\u2028').replace (/\u2029/g,'\\u2029');"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stringAddCommas (x) { //5/27/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="5/27/14; 8:29:32 AM by DW">
					<outline text="Created. Pass in a number, and we'll return a string with commas added."></outline>
					</outline>
				</outline>
			<outline text="return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, &quot;,&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function readHttpFile (url, callback, timeoutInMilliseconds, headers) { //5/27/14 by DW xxx">
			<outline isComment="true" text="Changes">
				<outline text="7/17/15; 10:43:16 AM by DW">
					<outline text="New optional param, headers."></outline>
					</outline>
				<outline text="12/14/14; 5:38:18 PM by DW">
					<outline text="Add optional timeoutInMilliseconds param."></outline>
					</outline>
				<outline text="5/29/14; 11:13:28 AM by DW">
					<outline text="On error, call the callback with an undefined parameter."></outline>
					</outline>
				<outline text="5/27/14; 8:31:21 AM by DW">
					<outline text="Simple asynchronous file read over http."></outline>
					</outline>
				</outline>
			<outline text="if (timeoutInMilliseconds === undefined) {">
				<outline text="timeoutInMilliseconds = 30000;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var jxhr = $.ajax ({ ">
				<outline text="url: url,"></outline>
				<outline text="dataType: &quot;text&quot;, "></outline>
				<outline created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850" text="headers: headers,"></outline>
				<outline text="timeout: timeoutInMilliseconds "></outline>
				<outline text="}) "></outline>
				</outline>
			<outline text=".success (function (data, status) { ">
				<outline text="callback (data);"></outline>
				<outline text="}) "></outline>
				</outline>
			<outline text=".error (function (status) { ">
				<outline isComment="true" text="for info about timeous see this page.">
					<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"></outline>
					</outline>
				<outline created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098" text="console.log (&quot;readHttpFile: url == &quot; + url + &quot;, error == &quot; + jsonStringify (status));"></outline>
				<outline text="callback (undefined);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function readHttpFileThruProxy (url, type, callback) { //10/25/14 by DW">
			<outline created="Thu, 27 Feb 2014 15:33:29 GMT" pgfnum="38051" text="var urlReadFileApi = &quot;http://pub2.fargo.io:5347/httpReadUrl&quot;;"></outline>
			<outline text="if (type === undefined) {">
				<outline text="type = &quot;text/plain&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var jxhr = $.ajax ({ ">
				<outline text="url: urlReadFileApi + &quot;?url=&quot; + encodeURIComponent (url) + &quot;&amp;type=&quot; + encodeURIComponent (type),"></outline>
				<outline text="dataType: &quot;text&quot; , "></outline>
				<outline text="timeout: 30000 "></outline>
				<outline text="}) "></outline>
				</outline>
			<outline text=".success (function (data, status) { ">
				<outline text="if (callback != undefined) {">
					<outline text="callback (data);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}) "></outline>
				</outline>
			<outline text=".error (function (status) { ">
				<outline created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098" text="console.log (&quot;readHttpFileThruProxy: url == &quot; + url + &quot;, error == &quot; + status.statusText + &quot;.&quot;);"></outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Tue, 03 Dec 2013 17:49:28 GMT" pgfnum="32988" text="function stringPopLastField (s, chdelim) { //5/28/14 by DW">
			<outline created="Tue, 03 Dec 2013 15:52:55 GMT" pgfnum="32931" text="if (s.length == 0) {">
				<outline created="Tue, 03 Dec 2013 15:53:04 GMT" pgfnum="32934" text="return (s);"></outline>
				<outline created="Tue, 03 Dec 2013 15:53:10 GMT" pgfnum="32935" text="}"></outline>
				</outline>
			<outline created="Tue, 03 Dec 2013 15:53:15 GMT" pgfnum="32937" text="if (endsWith (s, chdelim)) {">
				<outline created="Tue, 03 Dec 2013 15:53:31 GMT" pgfnum="32939" text="s = stringDelete (s, s.length, 1);"></outline>
				<outline created="Tue, 03 Dec 2013 15:53:28 GMT" pgfnum="32938" text="}"></outline>
				</outline>
			<outline created="Tue, 03 Dec 2013 15:52:18 GMT" pgfnum="32926" text="while (s.length &gt; 0) {">
				<outline created="Tue, 03 Dec 2013 15:53:15 GMT" pgfnum="32937" text="if (endsWith (s, chdelim)) {">
					<outline created="Tue, 03 Dec 2013 15:55:08 GMT" pgfnum="32940" text="return (stringDelete (s, s.length, 1));"></outline>
					<outline created="Tue, 03 Dec 2013 15:53:28 GMT" pgfnum="32938" text="}"></outline>
					</outline>
				<outline created="Tue, 03 Dec 2013 15:55:08 GMT" pgfnum="32940" text="s = stringDelete (s, s.length, 1);"></outline>
				<outline created="Tue, 03 Dec 2013 15:52:30 GMT" pgfnum="32927" text="}"></outline>
				</outline>
			<outline created="Tue, 03 Dec 2013 15:52:34 GMT" pgfnum="32928" text="return (s);"></outline>
			<outline created="Tue, 03 Dec 2013 17:49:55 GMT" pgfnum="32993" text="}"></outline>
			</outline>
		<outline text="function stringPopExtension (s) { //4/29/15 by DW">
			<outline text="for (var i = s.length - 1; i &gt;= 0; i--) {">
				<outline text="if (s [i] == &quot;.&quot;) {">
					<outline text="return (stringMid (s, 1, i));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function filledString (ch, ct) { //6/4/14 by DW">
			<outline text="var s = &quot;&quot;;"></outline>
			<outline text="for (var i = 0; i &lt; ct; i++) {">
				<outline text="s += ch;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function encodeXml (s) { //7/15/14 by DW">
			<outline collapse="true" text="var charMap = {">
				<outline text="'&lt;': '&amp;lt;',"></outline>
				<outline text="'&gt;': '&amp;gt;',"></outline>
				<outline text="'&amp;': '&amp;amp;',"></outline>
				<outline text="'&quot;': '&amp;'+'quot;'"></outline>
				<outline text="};"></outline>
				</outline>
			<outline created="Sat, 13 Apr 2013 20:25:04 GMT" pgfnum="1662" text="s = s.toString();"></outline>
			<outline created="Fri, 12 Apr 2013 21:27:40 GMT" pgfnum="1632" text="s = s.replace(/\u00A0/g, &quot; &quot;);"></outline>
			<outline collapse="true" text="var escaped = s.replace(/[&lt;&gt;&amp;&quot;]/g, function(ch) {">
				<outline text="return charMap [ch];"></outline>
				<outline text="});"></outline>
				</outline>
			<outline created="Thu, 07 Feb 2013 04:53:23 GMT" pgfnum="129" text="return escaped;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Tue, 05 Nov 2013 22:39:12 GMT" pgfnum="30895" text="function decodeXml (s) { //11/7/14 by DW">
			<outline text="return (s.replace (/&amp;lt;/g,'&lt;').replace(/&amp;gt;/g,'&gt;').replace(/&amp;amp;/g,'&amp;'));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Thu, 13 Mar 2014 15:18:41 GMT" pgfnum="39151" text="function hotUpText (s, url) { //7/18/14 by DW">
			<outline created="Thu, 13 Mar 2014 15:41:14 GMT" isComment="true" pgfnum="39177" text="Changes">
				<outline text="7/18/14; 8:36:22 AM by DW">
					<outline text="Cribbed from fargoUtils.js -- it's the kind of code you want accessible everywhere."></outline>
					</outline>
				<outline created="Fri, 14 Mar 2014 21:34:46 GMT" pgfnum="39299" text="3/14/14; 5:34:47 PM by DW">
					<outline created="Fri, 14 Mar 2014 21:34:47 GMT" pgfnum="39300" text="Allow url to be undefined, just return s if that's so."></outline>
					</outline>
				<outline created="Thu, 13 Mar 2014 15:41:17 GMT" pgfnum="39178" text="3/13/14; 11:41:18 AM by DW">
					<outline created="Thu, 13 Mar 2014 15:41:18 GMT" pgfnum="39179" text="If the text contains text within [square brackets], hot-up that text and return it."></outline>
					<outline created="Thu, 13 Mar 2014 15:41:50 GMT" pgfnum="39180" text="Otherwise, hot-up the whole string and return it."></outline>
					</outline>
				</outline>
			<outline created="Fri, 14 Mar 2014 21:33:53 GMT" pgfnum="39293" text=""></outline>
			<outline created="Fri, 14 Mar 2014 21:33:53 GMT" pgfnum="39294" text="if (url === undefined) { //makes it easier to call -- 3/14/14 by DW">
				<outline created="Fri, 14 Mar 2014 21:34:15 GMT" pgfnum="39297" text="return (s);"></outline>
				<outline created="Fri, 14 Mar 2014 21:34:18 GMT" pgfnum="39298" text="}"></outline>
				</outline>
			<outline created="Fri, 14 Mar 2014 21:33:53 GMT" pgfnum="39296" text=""></outline>
			<outline created="Thu, 13 Mar 2014 15:40:03 GMT" pgfnum="39175" text="function linkit (s) {">
				<outline created="Thu, 13 Mar 2014 15:27:00 GMT" pgfnum="39166" text="return (&quot;&lt;a href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + s + &quot;&lt;/a&gt;&quot;);"></outline>
				<outline created="Thu, 13 Mar 2014 15:40:11 GMT" pgfnum="39176" text="}"></outline>
				</outline>
			<outline created="Thu, 13 Mar 2014 15:19:24 GMT" pgfnum="39153" text="var ixleft = s.indexOf (&quot;[&quot;), ixright = s.indexOf (&quot;]&quot;);"></outline>
			<outline created="Thu, 13 Mar 2014 15:21:44 GMT" pgfnum="39155" text="if ((ixleft == -1) || (ixright == -1)) {">
				<outline created="Thu, 13 Mar 2014 15:21:58 GMT" pgfnum="39156" text="return (linkit (s));"></outline>
				<outline created="Thu, 13 Mar 2014 15:22:02 GMT" pgfnum="39157" text="}"></outline>
				</outline>
			<outline created="Thu, 13 Mar 2014 15:22:26 GMT" pgfnum="39158" text="if (ixright &lt; ixleft) {">
				<outline created="Thu, 13 Mar 2014 15:21:58 GMT" pgfnum="39156" text="return (linkit (s));"></outline>
				<outline created="Thu, 13 Mar 2014 15:22:39 GMT" pgfnum="39160" text="}"></outline>
				</outline>
			<outline created="Thu, 13 Mar 2014 15:23:06 GMT" pgfnum="39161" text=""></outline>
			<outline created="Thu, 13 Mar 2014 15:23:12 GMT" pgfnum="39162" text="var linktext = s.substr (ixleft + 1, ixright - ixleft - 1); //string.mid (s, ixleft, ixright - ixleft + 1);"></outline>
			<outline created="Thu, 13 Mar 2014 15:27:00 GMT" pgfnum="39166" text="linktext = &quot;&lt;a href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + linktext + &quot;&lt;/a&gt;&quot;;"></outline>
			<outline created="Thu, 13 Mar 2014 15:27:35 GMT" pgfnum="39167" text=""></outline>
			<outline created="Thu, 13 Mar 2014 15:34:51 GMT" pgfnum="39173" text="var leftpart = s.substr (0, ixleft);"></outline>
			<outline created="Thu, 13 Mar 2014 15:35:19 GMT" pgfnum="39174" text="var rightpart = s.substr (ixright + 1, s.length);"></outline>
			<outline created="Thu, 13 Mar 2014 15:27:36 GMT" pgfnum="39168" text="s = leftpart + linktext + rightpart;"></outline>
			<outline created="Thu, 13 Mar 2014 15:28:24 GMT" pgfnum="39169" text="return (s);"></outline>
			<outline created="Thu, 13 Mar 2014 15:19:04 GMT" pgfnum="39152" text="}"></outline>
			</outline>
		<outline text="function getDomainFromUrl (url) { //7/11/15 by DW">
			<outline text="if ((url != null ) &amp;&amp; (url != &quot;&quot;)) {">
				<outline text="url = url.replace(&quot;www.&quot;,&quot;&quot;).replace(&quot;www2.&quot;, &quot;&quot;).replace(&quot;feedproxy.&quot;, &quot;&quot;).replace(&quot;feeds.&quot;, &quot;&quot;);"></outline>
				<outline text="var root = url.split('?')[0]; // cleans urls of form http://domain.com?a=1&amp;b=2"></outline>
				<outline text="url = root.split('/')[2];"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (url);"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="function getFavicon (url) { //7/18/14 by DW">
			<outline text="var domain = getDomainFromUrl (url);"></outline>
			<outline text="return (&quot;http://www.google.com/s2/favicons?domain=&quot; + domain);"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="function getURLParameter (name) { //7/21/14 by DW">
			<outline text="return (decodeURI ((RegExp(name + '=' + '(.+?)(&amp;|$)').exec(location.search)||[,null])[1]));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function urlSplitter (url) { //7/15/14 by DW">
			<outline text="var pattern = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;"></outline>
			<outline text="var result = pattern.exec (url);"></outline>
			<outline text="if (result == null) {">
				<outline text="result = [];"></outline>
				<outline text="result [5] = url;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var splitUrl = {">
				<outline text="scheme: result [1],"></outline>
				<outline text="host: result [3],"></outline>
				<outline text="port: result [4],"></outline>
				<outline text="path: result [5],"></outline>
				<outline text="query: result [6],"></outline>
				<outline text="hash: result [7]"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="return (splitUrl);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 23 Jan 2013 19:04:20 GMT" pgfnum="17608" text="function innerCaseName (text) { //8/12/14 by DW">
			<outline created="Wed, 23 Jan 2013 19:07:21 GMT" pgfnum="17610" text="var s = &quot;&quot;, ch, flNextUpper = false;"></outline>
			<outline created="Sun, 30 Jun 2013 21:12:17 GMT" pgfnum="27487" text="text = stripMarkup (text); "></outline>
			<outline created="Wed, 23 Jan 2013 19:07:25 GMT" pgfnum="17611" text="for (var i = 0; i &lt; text.length; i++) {">
				<outline created="Wed, 23 Jan 2013 19:11:28 GMT" pgfnum="17618" text="ch = text [i];"></outline>
				<outline created="Wed, 23 Jan 2013 19:10:50 GMT" pgfnum="17616" text="if (isAlpha (ch) || isNumeric (ch)) { ">
					<outline created="Wed, 23 Jan 2013 19:12:50 GMT" pgfnum="17624" text="if (flNextUpper) {">
						<outline created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628" text="ch = ch.toUpperCase ();"></outline>
						<outline created="Wed, 23 Jan 2013 19:13:10 GMT" pgfnum="17627" text="flNextUpper = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline created="Wed, 23 Jan 2013 19:38:06 GMT" pgfnum="17637" text="else {">
						<outline created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628" text="ch = ch.toLowerCase ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline created="Wed, 23 Jan 2013 19:08:53 GMT" pgfnum="17613" text="s += ch;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Wed, 23 Jan 2013 19:12:04 GMT" pgfnum="17619" text="else {">
					<outline created="Wed, 23 Jan 2013 19:12:12 GMT" pgfnum="17621" text="if (ch == ' ') { ">
						<outline created="Wed, 23 Jan 2013 19:12:25 GMT" pgfnum="17623" text="flNextUpper = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Wed, 23 Jan 2013 19:09:53 GMT" pgfnum="17615" text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Mon, 03 Feb 2014 14:40:17 GMT" pgfnum="36877" text="function hitCounter (counterGroup, counterServer) { //8/12/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="5/8/15; 9:11:20 AM by DW">
					<outline text="Changed defaultCounterServer to point to the new Montauk server instead of the old Heroku server."></outline>
					</outline>
				</outline>
			<outline text="var defaultCounterGroup = &quot;scripting&quot;, defaultCounterServer = &quot;http://counter2.fargo.io:5337/counter&quot;;"></outline>
			<outline created="Mon, 03 Feb 2014 17:51:28 GMT" pgfnum="36969" text="var thispageurl = location.href;"></outline>
			<outline text="if (counterGroup === undefined) {">
				<outline text="counterGroup = defaultCounterGroup;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (counterServer === undefined) {">
				<outline text="counterServer = defaultCounterServer;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Sun, 09 Feb 2014 04:20:11 GMT" pgfnum="37249" text="if (thispageurl === undefined) {">
				<outline created="Sun, 09 Feb 2014 04:20:17 GMT" pgfnum="37250" text="thispageurl = &quot;&quot;;"></outline>
				<outline created="Sun, 09 Feb 2014 04:20:20 GMT" pgfnum="37251" text="}"></outline>
				</outline>
			<outline created="Sun, 09 Feb 2014 16:36:18 GMT" pgfnum="37297" text="if (endsWith (thispageurl, &quot;#&quot;)) {">
				<outline created="Sun, 09 Feb 2014 16:36:40 GMT" pgfnum="37299" text="thispageurl = thispageurl.substr (0, thispageurl.length - 1);"></outline>
				<outline created="Sun, 09 Feb 2014 16:36:29 GMT" pgfnum="37298" text="}"></outline>
				</outline>
			<outline text="var jxhr = $.ajax ({">
				<outline text="url: counterServer + &quot;?group=&quot; + encodeURIComponent (counterGroup) + &quot;&amp;referer=&quot; + encodeURIComponent (document.referrer) + &quot;&amp;url=&quot; + encodeURIComponent (thispageurl),"></outline>
				<outline text="dataType: &quot;jsonp&quot;,"></outline>
				<outline text="jsonpCallback : &quot;getData&quot;,"></outline>
				<outline text="timeout: 30000"></outline>
				<outline text="})"></outline>
				</outline>
			<outline text=".success (function (data, status, xhr) {">
				<outline created="Mon, 03 Feb 2014 17:10:51 GMT" pgfnum="36951" text="console.log (&quot;hitCounter: counter ping accepted by server, group == &quot; + counterGroup + &quot;, page url == &quot; + thispageurl);"></outline>
				<outline text="})"></outline>
				</outline>
			<outline text=".error (function (status, textStatus, errorThrown) {">
				<outline created="Mon, 03 Feb 2014 17:10:51 GMT" pgfnum="36951" text="console.log (&quot;hitCounter: counter ping error: &quot; + textStatus);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline created="Mon, 03 Feb 2014 14:40:46 GMT" pgfnum="36880" text="}"></outline>
			</outline>
		<outline text="function stringMid (s, ix, len) { //8/12/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="8/12/14; 7:25:21 PM by DW">
					<outline text="1-based string copy, pattered after Frontier's string.mid."></outline>
					</outline>
				</outline>
			<outline text="return (s.substr (ix-1, len));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getCmdKeyPrefix () { //8/15/14 by DW">
			<outline created="Mon, 25 Mar 2013 22:56:33 GMT" pgfnum="21405" text="if (navigator.platform.toLowerCase ().substr (0, 3) == &quot;mac&quot;) {">
				<outline created="Mon, 25 Mar 2013 22:59:21 GMT" pgfnum="21407" text="return (&quot;&amp;#8984;&quot;);"></outline>
				<outline created="Mon, 25 Mar 2013 22:59:16 GMT" pgfnum="21406" text="}"></outline>
				</outline>
			<outline text="else {">
				<outline created="Mon, 25 Mar 2013 22:54:43 GMT" pgfnum="21400" text="return (&quot;Ctrl+&quot;); "></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Tue, 19 Nov 2013 17:11:23 GMT" pgfnum="31753" text="function getRandomSnarkySlogan () { //8/15/14 by DW">
			<outline created="Tue, 19 Nov 2013 17:04:51 GMT" pgfnum="31748" text="var snarkySlogans = [">
				<outline text="&quot;Good for the environment.&quot;, "></outline>
				<outline text="&quot;All baking done on premises.&quot;, "></outline>
				<outline text="&quot;Still diggin!&quot;, "></outline>
				<outline text="&quot;It's even worse than it appears.&quot;, "></outline>
				<outline text="&quot;Ask not what the Internet can do for you...&quot;, "></outline>
				<outline text="&quot;You should never argue with a crazy man.&quot;, "></outline>
				<outline text="&quot;Welcome back my friends to the show that never ends.&quot;, "></outline>
				<outline text="&quot;Greetings, citizen of Planet Earth. We are your overlords. :-)&quot;, "></outline>
				<outline text="&quot;We don't need no stinkin rock stars.&quot;, "></outline>
				<outline text="&quot;This aggression will not stand.&quot;, "></outline>
				<outline text="&quot;Pay no attention to the man behind the curtain.&quot;, "></outline>
				<outline text="&quot;Only steal from the best.&quot;, "></outline>
				<outline text="&quot;Reallll soooon now...&quot;, "></outline>
				<outline text="&quot;What a long strange trip it's been.&quot;, "></outline>
				<outline text="&quot;Ask not what the Internet can do for you.&quot;, "></outline>
				<outline text="&quot;When in doubt, blog.&quot;,"></outline>
				<outline created="Mon, 23 Dec 2013 16:51:44 GMT" pgfnum="34255" text="&quot;Shut up and eat your vegetables.&quot;,"></outline>
				<outline created="Fri, 21 Feb 2014 15:54:43 GMT" pgfnum="37822" text="&quot;Don't slam the door on the way out.&quot;,"></outline>
				<outline created="Tue, 15 Apr 2014 14:39:25 GMT" pgfnum="40036" text="&quot;Yeah well, that's just, you know, like, your opinion, man.&quot;,"></outline>
				<outline created="Thu, 08 May 2014 22:35:36 GMT" pgfnum="41289" text="&quot;So, it has come to this.&quot;"></outline>
				<outline created="Tue, 19 Nov 2013 17:05:35 GMT" pgfnum="31749" text="]"></outline>
				</outline>
			<outline created="Tue, 19 Nov 2013 17:20:04 GMT" pgfnum="31755" text="return (snarkySlogans [random (0, snarkySlogans.length - 1)]);"></outline>
			<outline created="Tue, 19 Nov 2013 17:19:17 GMT" pgfnum="31754" text="}"></outline>
			</outline>
		<outline created="Tue, 15 Jan 2013 00:32:50 GMT" pgfnum="17118" text="function dayOfWeekToString (theDay) { //8/23/14 by DW">
			<outline text="var weekday = [">
				<outline text="&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;"></outline>
				<outline text="];"></outline>
				</outline>
			<outline text="return (weekday[theDay]);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function viewDate (when, flShortDayOfWeek)  {  //8/23/14 by DW">
			<outline text="var now = new Date ();"></outline>
			<outline text="when = new Date (when);"></outline>
			<outline text="if (sameDay (when, now))  { ">
				<outline text="return (timeString (when, false)) //2/9/13 by DW;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else  { ">
				<outline text="var oneweek = 1000 * 60 * 60 * 24 * 7;"></outline>
				<outline text="var cutoff = now - oneweek;"></outline>
				<outline text="if (when &gt; cutoff)   { //within the last week">
					<outline text="var s = dayOfWeekToString (when.getDay ());"></outline>
					<outline text="if (flShortDayOfWeek)  { ">
						<outline text="s = s.substring (0, 3);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (s);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else  { ">
					<outline text="return (when.toLocaleDateString ());"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Sat, 09 Feb 2013 17:31:54 GMT" pgfnum="18443" text="function timeString (when, flIncludeSeconds) { //8/26/14 by DW">
			<outline created="Sat, 09 Feb 2013 17:33:42 GMT" pgfnum="18444" text="var hour = when.getHours (), minutes = when.getMinutes (), ampm = &quot;AM&quot;, s;"></outline>
			<outline created="Tue, 15 Jan 2013 14:31:54 GMT" pgfnum="17144" text="if (hour &gt;= 12) {">
				<outline created="Tue, 15 Jan 2013 14:32:11 GMT" pgfnum="17146" text="ampm = &quot;PM&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Tue, 15 Jan 2013 14:31:54 GMT" pgfnum="17144" text="if (hour &gt; 12) {">
				<outline created="Tue, 15 Jan 2013 14:32:00 GMT" pgfnum="17145" text="hour -= 12;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Tue, 12 Mar 2013 04:25:03 GMT" pgfnum="20206" text="if (hour == 0) {">
				<outline created="Tue, 12 Mar 2013 04:25:09 GMT" pgfnum="20207" text="hour = 12;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Tue, 15 Jan 2013 14:33:28 GMT" pgfnum="17148" text="if (minutes &lt; 10) {">
				<outline created="Tue, 15 Jan 2013 14:34:21 GMT" pgfnum="17150" text="minutes = &quot;0&quot; + minutes;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Sat, 09 Feb 2013 17:35:22 GMT" pgfnum="18447" text="if (flIncludeSeconds) { ">
				<outline created="Sat, 09 Feb 2013 17:36:23 GMT" pgfnum="18452" text="var seconds = when.getSeconds ();"></outline>
				<outline created="Tue, 15 Jan 2013 14:33:28 GMT" pgfnum="17148" text="if (seconds &lt; 10) {">
					<outline created="Tue, 15 Jan 2013 14:34:21 GMT" pgfnum="17150" text="seconds = &quot;0&quot; + seconds;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Sat, 09 Feb 2013 17:35:47 GMT" pgfnum="18451" text="s = hour + &quot;:&quot; + minutes + &quot;:&quot; + seconds + ampm;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Sat, 09 Feb 2013 17:35:33 GMT" pgfnum="18449" text="else {">
				<outline created="Sat, 09 Feb 2013 17:35:47 GMT" pgfnum="18451" text="s = hour + &quot;:&quot; + minutes + ampm;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Sat, 09 Feb 2013 17:34:33 GMT" pgfnum="18446" text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function stringLastField (s, chdelim) { //8/27/14 by DW">
			<outline created="Wed, 20 Nov 2013 14:22:39 GMT" pgfnum="31824" text="var ct = stringCountFields (s, chdelim);"></outline>
			<outline text="if (ct == 0) { //8/31/14 by DW">
				<outline text="return (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Thu, 01 Nov 2007 17:23:38 GMT" text="return (stringNthField (s, chdelim, ct));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function maxLengthString (s, maxlength) { //8/27/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="8/27/14; 11:04:22 AM by DW">
					<outline text="If the string is longer than maxlength, truncate it. But not in the middle of a word. And add three dots to the end if we had to truncate it."></outline>
					</outline>
				</outline>
			<outline text="if (s.length &gt; maxlength) {">
				<outline text="s = s.substr (0, maxlength);"></outline>
				<outline text="while (true) {">
					<outline text="var len = s.length; flbreak = false;"></outline>
					<outline text="if (len == 0) {">
						<outline text="break;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (s [len - 1] == &quot; &quot;) {">
						<outline text="flbreak = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="s = s.substr (0, len - 1);"></outline>
					<outline text="if (flbreak) {">
						<outline text="break;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="s = s + &quot;...&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 04 Dec 2013 19:46:43 GMT" pgfnum="33129" text="function formatDate (theDate, dateformat, timezone) { //8/28/14 by DW">
			<outline text="if (theDate === undefined) {">
				<outline text="theDate = new Date ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (dateformat === undefined) {">
				<outline text="dateformat = &quot;%c&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (timezone === undefined) {">
				<outline text="timezone =  - (new Date ().getTimezoneOffset () / 60);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Thu, 13 Jun 2013 22:19:31 GMT" pgfnum="4655" text="try {">
				<outline created="Thu, 13 Jun 2013 21:39:14 GMT" pgfnum="4646" text="var offset = new Number (timezone);"></outline>
				<outline created="Thu, 13 Jun 2013 21:24:44 GMT" pgfnum="4636" text="var d = new Date (theDate);"></outline>
				<outline created="Thu, 13 Jun 2013 21:29:10 GMT" pgfnum="4638" text="var localTime = d.getTime ();"></outline>
				<outline created="Thu, 13 Jun 2013 21:29:18 GMT" pgfnum="4639" text="var localOffset = d.getTimezoneOffset () *  60000;"></outline>
				<outline created="Thu, 13 Jun 2013 21:30:17 GMT" pgfnum="4640" text="var utc = localTime + localOffset;"></outline>
				<outline text="var newTime = utc + (3600000 * offset);"></outline>
				<outline created="Thu, 13 Jun 2013 21:31:02 GMT" pgfnum="4641" text="return (new Date (newTime).strftime (dateformat));"></outline>
				<outline created="Thu, 13 Jun 2013 22:19:58 GMT" pgfnum="4659" text="}"></outline>
				</outline>
			<outline created="Thu, 13 Jun 2013 22:19:41 GMT" pgfnum="4656" text="catch (tryerror) {">
				<outline created="Thu, 13 Jun 2013 22:19:50 GMT" pgfnum="4657" text="return (new Date (theDate).strftime (dateformat));"></outline>
				<outline created="Thu, 13 Jun 2013 22:19:51 GMT" pgfnum="4658" text="}"></outline>
				</outline>
			<outline created="Wed, 04 Dec 2013 19:47:03 GMT" pgfnum="33133" text="}"></outline>
			</outline>
		<outline text="function addPeriodToSentence (s) { //8/29/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="8/29/14; 8:21:39 AM by DW">
					<outline text="It looks stupid to add a period at the end of a sentence that already ends with a punctuation mark. So we only add one if the last character is not a punctuation mark."></outline>
					</outline>
				</outline>
			<outline text="if (s.length &gt; 0) {">
				<outline text="var fladd = true;"></outline>
				<outline text="var ch = s [s.length - 1];"></outline>
				<outline text="switch (ch) {">
					<outline text="case &quot;!&quot;: case &quot;?&quot;: case &quot;:&quot;:">
						<outline text="fladd = false;"></outline>
						<outline text="break;"></outline>
						</outline>
					<outline text="default:">
						<outline text="if (endsWith (s, &quot;.\&quot;&quot;)) {">
							<outline text="fladd = false;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="if (endsWith (s, &quot;.'&quot;)) {">
								<outline text="fladd = false;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (fladd) {">
					<outline text="s += &quot;.&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function copyScalars (source, dest) { //8/31/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="8/31/14; 4:53:19 PM by DW">
					<outline text="Copy the scalars from one struct to another."></outline>
					</outline>
				</outline>
			<outline text="for (var x in source) { ">
				<outline created="Thu, 12 Dec 2013 14:09:03 GMT" pgfnum="33476" text="var type, val = source [x];"></outline>
				<outline created="Tue, 07 Jan 2014 22:16:34 GMT" pgfnum="35506" text="if (val instanceof Date) { ">
					<outline created="Tue, 07 Jan 2014 22:17:30 GMT" pgfnum="35509" text="val = val.toString ();"></outline>
					<outline created="Tue, 07 Jan 2014 22:16:51 GMT" pgfnum="35508" text="}"></outline>
					</outline>
				<outline created="Tue, 07 Jan 2014 22:21:56 GMT" pgfnum="35510" text="type = typeof (val);"></outline>
				<outline created="Thu, 12 Dec 2013 14:08:43 GMT" pgfnum="33475" text="if ((type != &quot;object&quot;) &amp;&amp; (type != undefined)) {">
					<outline created="Thu, 12 Dec 2013 14:11:08 GMT" pgfnum="33479" text="dest [x] = val;"></outline>
					<outline created="Thu, 12 Dec 2013 14:10:25 GMT" pgfnum="33478" text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function linkToDomainFromUrl (url, flshort, maxlength) { //10/10/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="10/10/14; 10:45:19 PM by DW">
					<outline text="New optional param, maxlength. "></outline>
					</outline>
				<outline text="9/10/14; 9:54:12 AM by DW">
					<outline text="From a full URL extract the domain. If flshort is true, we reduce it to three parts, and drop the suffix, so www.hello.com becomes hello."></outline>
					</outline>
				</outline>
			<outline text="var splitUrl = urlSplitter (url), host = splitUrl.host.toLowerCase ();"></outline>
			<outline text="if (flshort === undefined) {">
				<outline text="flshort = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flshort) {">
				<outline text="var splithost = host.split (&quot;.&quot;);"></outline>
				<outline text="if (splithost.length == 3) {">
					<outline text="host = splithost [1];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="host = splithost [0];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
					<outline text="host = stringDelete (host, 1, 4);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (maxlength != undefined) { //10/10/14; 10:46:56 PM by DW">
				<outline text="if (host.length &gt; maxlength) {">
					<outline text="host = stringMid (host, 1, maxlength) + &quot;...&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="return (&quot;&lt;a class=\&quot;aLinkToDomainFromUrl\&quot; href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function linkToDomainFromUrl (url, flshort) { //9/10/14 by DW">
			<outline isComment="true" text="Changes">
				<outline text="9/10/14; 9:54:12 AM by DW">
					<outline text="From a full URL extract the domain. If flshort is true, we reduce it to three parts, and drop the suffix, so www.hello.com becomes hello."></outline>
					</outline>
				</outline>
			<outline text="var splitUrl = urlSplitter (url), host = splitUrl.host.toLowerCase ();"></outline>
			<outline text="if (flshort === undefined) {">
				<outline text="flshort = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flshort) {">
				<outline text="var splithost = host.split (&quot;.&quot;);"></outline>
				<outline text="if (splithost.length == 3) {">
					<outline text="host = splithost [1];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="host = splithost [0];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
					<outline text="host = stringDelete (host, 1, 4);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (&quot;&lt;a class=\&quot;aLinkToDomainFromUrl\&quot; href=\&quot;&quot; + url + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 23 Jan 2013 15:14:04 GMT" pgfnum="17535" text="function getRandomPassword (ctchars) { //10/14/14 by DW">
			<outline text="var s= &quot;&quot;, ch;"></outline>
			<outline text="while (s.length &lt; ctchars)  {">
				<outline text="ch = String.fromCharCode (random (33, 122));"></outline>
				<outline created="Wed, 11 Jan 2006 12:42:53 GMT" text="if (isAlpha (ch) || isNumeric (ch)) {">
					<outline text="s += ch;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s.toLowerCase ());"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Fri, 08 Mar 2013 15:39:05 GMT" pgfnum="19955" text="function monthToString (theMonthNum) { //11/4/14 by DW">
			<outline text=""></outline>
			<outline isComment="true" text="var names = [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;];"></outline>
			<outline created="Fri, 08 Mar 2013 15:40:54 GMT" isComment="true" pgfnum="19957" text="return (names [theMonthNum]);"></outline>
			<outline text=""></outline>
			<outline text="var theDate;"></outline>
			<outline created="Fri, 08 Mar 2013 15:46:04 GMT" pgfnum="19959" text="if (theMonthNum === undefined) {">
				<outline created="Fri, 08 Mar 2013 15:46:43 GMT" pgfnum="19962" text="theDate = new Date ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="theDate = new Date ((theMonthNum + 1) + &quot;/1/2014&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (formatDate (theDate, &quot;%B&quot;));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 23 Jan 2013 19:04:20 GMT" pgfnum="17608" text="function getCanonicalName (text) { //11/4/14 by DW">
			<outline created="Wed, 23 Jan 2013 19:07:21 GMT" pgfnum="17610" text="var s = &quot;&quot;, ch, flNextUpper = false;"></outline>
			<outline created="Sun, 30 Jun 2013 21:12:17 GMT" pgfnum="27487" text="text = stripMarkup (text); //6/30/13 by DW"></outline>
			<outline created="Wed, 23 Jan 2013 19:07:25 GMT" pgfnum="17611" text="for (var i = 0; i &lt; text.length; i++) {">
				<outline created="Wed, 23 Jan 2013 19:11:28 GMT" pgfnum="17618" text="ch = text [i];"></outline>
				<outline created="Wed, 23 Jan 2013 19:10:50 GMT" pgfnum="17616" text="if (isAlpha (ch) || isNumeric (ch)) {">
					<outline created="Wed, 23 Jan 2013 19:12:50 GMT" pgfnum="17624" text="if (flNextUpper) {">
						<outline created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628" text="ch = ch.toUpperCase ();"></outline>
						<outline created="Wed, 23 Jan 2013 19:13:10 GMT" pgfnum="17627" text="flNextUpper = false;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline created="Wed, 23 Jan 2013 19:38:06 GMT" pgfnum="17637" text="else {">
						<outline created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628" text="ch = ch.toLowerCase ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline created="Wed, 23 Jan 2013 19:08:53 GMT" pgfnum="17613" text="s += ch;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Wed, 23 Jan 2013 19:12:04 GMT" pgfnum="17619" text="else { ">
					<outline created="Wed, 23 Jan 2013 19:12:12 GMT" pgfnum="17621" text="if (ch == ' ') {">
						<outline created="Wed, 23 Jan 2013 19:12:25 GMT" pgfnum="17623" text="flNextUpper = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Wed, 23 Jan 2013 19:09:53 GMT" pgfnum="17615" text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function clockNow () { //11/7/14 by DW">
			<outline text="return (new Date ());"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function sleepTillTopOfMinute (callback) { //11/22/14 by DW">
			<outline text="var ctseconds = Math.round (60 - (new Date ().getSeconds () + 60) % 60);"></outline>
			<outline text="if (ctseconds == 0) {">
				<outline text="ctseconds = 60;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text="console.log (&quot;Sleeping for &quot; + ctseconds + &quot; seconds.&quot;);"></outline>
			<outline text="setTimeout (callback, ctseconds * 1000); //8/13/15 by DW -- was hard-coded to &quot;everyMinute&quot; ignored the callback param, fixed"></outline>
			<outline isComment="true" text=""></outline>
			<outline isComment="true" text="var ctmilliseconds = 60000 - ((Number (new Date ()) + 60000) % 60000);"></outline>
			<outline isComment="true" text="ctmilliseconds = (Math.round (ctmilliseconds / 1000)) * 1000; //11/25/14 by DW"></outline>
			<outline isComment="true" text="console.log (&quot;Sleeping for &quot; + ctmilliseconds + &quot; milliseconds.&quot;)"></outline>
			<outline isComment="true" text="setTimeout (callback, ctmilliseconds); "></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function scheduleNextRun (callback, ctMillisecsBetwRuns) { //11/27/14 by DW">
			<outline text="var ctmilliseconds = ctMillisecsBetwRuns - (Number (new Date ().getMilliseconds ()) + ctMillisecsBetwRuns) % ctMillisecsBetwRuns;"></outline>
			<outline text="setTimeout (callback, ctmilliseconds); "></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function urlEncode (s) { //12/4/14 by DW">
			<outline text="return (encodeURIComponent (s));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline created="Wed, 12 Jun 2013 15:07:12 GMT" pgfnum="25882" text="function popTweetNameAtStart (s) { //12/8/14 by DW">
			<outline created="Wed, 12 Jun 2013 15:51:18 GMT" pgfnum="25913" text="var ch;"></outline>
			<outline created="Wed, 12 Jun 2013 15:07:53 GMT" pgfnum="25887" text="s = trimWhitespace (s);"></outline>
			<outline created="Wed, 12 Jun 2013 15:07:37 GMT" pgfnum="25884" text="if (s.length &gt; 0) {">
				<outline created="Wed, 12 Jun 2013 15:07:48 GMT" pgfnum="25886" text="if (s.charAt (0) == &quot;@&quot;) {">
					<outline text="while (s.charAt (0) != &quot; &quot;) {">
						<outline text="s = s.substr (1)"></outline>
						<outline created="Wed, 12 Jun 2013 15:50:49 GMT" pgfnum="25910" text="}"></outline>
						</outline>
					<outline text="while (s.length &gt; 0) {">
						<outline created="Wed, 12 Jun 2013 15:51:02 GMT" pgfnum="25912" text="ch = s.charAt (0);"></outline>
						<outline created="Wed, 12 Jun 2013 15:51:23 GMT" pgfnum="25914" text="if ((ch != &quot; &quot;) &amp;&amp; (ch != &quot;-&quot;)) {">
							<outline created="Wed, 12 Jun 2013 15:51:53 GMT" pgfnum="25916" text="break;"></outline>
							<outline created="Wed, 12 Jun 2013 15:51:45 GMT" pgfnum="25915" text="}"></outline>
							</outline>
						<outline text="s = s.substr (1)"></outline>
						<outline created="Wed, 12 Jun 2013 15:50:58 GMT" pgfnum="25911" text="}"></outline>
						</outline>
					<outline created="Wed, 12 Jun 2013 15:08:23 GMT" pgfnum="25888" text="}"></outline>
					</outline>
				<outline created="Wed, 12 Jun 2013 15:07:44 GMT" pgfnum="25885" text="}"></outline>
				</outline>
			<outline created="Wed, 12 Jun 2013 15:11:31 GMT" pgfnum="25893" text="return (s);"></outline>
			<outline created="Wed, 12 Jun 2013 15:07:31 GMT" pgfnum="25883" text="}"></outline>
			</outline>
		<outline text="function httpHeadRequest (url, callback) { //12/17/14 by DW">
			<outline text="var jxhr = $.ajax ({">
				<outline text="url: url,"></outline>
				<outline text="type: &quot;HEAD&quot;,"></outline>
				<outline text="dataType: &quot;text&quot;,"></outline>
				<outline text="timeout: 30000"></outline>
				<outline text="})"></outline>
				</outline>
			<outline text=".success (function (data, status, xhr) {">
				<outline text="callback (xhr); //you can do xhr.getResponseHeader to get one of the header elements"></outline>
				<outline text="})"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function httpExt2MIME (ext) { //12/24/14 by DW">
			<outline text="var lowerext = stringLower (ext);"></outline>
			<outline text="var map = {">
				<outline text="&quot;au&quot;: &quot;audio/basic&quot;,"></outline>
				<outline text="&quot;avi&quot;: &quot;application/x-msvideo&quot;,"></outline>
				<outline text="&quot;bin&quot;: &quot;application/x-macbinary&quot;,"></outline>
				<outline text="&quot;css&quot;: &quot;text/css&quot;,"></outline>
				<outline text="&quot;dcr&quot;: &quot;application/x-director&quot;,"></outline>
				<outline text="&quot;dir&quot;: &quot;application/x-director&quot;,"></outline>
				<outline text="&quot;dll&quot;: &quot;application/octet-stream&quot;,"></outline>
				<outline text="&quot;doc&quot;: &quot;application/msword&quot;,"></outline>
				<outline text="&quot;dtd&quot;: &quot;text/dtd&quot;,"></outline>
				<outline text="&quot;dxr&quot;: &quot;application/x-director&quot;,"></outline>
				<outline text="&quot;exe&quot;: &quot;application/octet-stream&quot;,"></outline>
				<outline text="&quot;fatp&quot;: &quot;text/html&quot;,"></outline>
				<outline text="&quot;ftsc&quot;: &quot;text/html&quot;,"></outline>
				<outline text="&quot;fttb&quot;: &quot;text/html&quot;,"></outline>
				<outline text="&quot;gif&quot;: &quot;image/gif&quot;,"></outline>
				<outline text="&quot;gz&quot;: &quot;application/x-gzip&quot;,"></outline>
				<outline text="&quot;hqx&quot;: &quot;application/mac-binhex40&quot;,"></outline>
				<outline text="&quot;htm&quot;: &quot;text/html&quot;,"></outline>
				<outline text="&quot;html&quot;: &quot;text/html&quot;,"></outline>
				<outline text="&quot;jpeg&quot;: &quot;image/jpeg&quot;,"></outline>
				<outline text="&quot;jpg&quot;: &quot;image/jpeg&quot;,"></outline>
				<outline text="&quot;js&quot;: &quot;application/javascript&quot;,"></outline>
				<outline text="&quot;mid&quot;: &quot;audio/x-midi&quot;,"></outline>
				<outline text="&quot;midi&quot;: &quot;audio/x-midi&quot;,"></outline>
				<outline text="&quot;mov&quot;: &quot;video/quicktime&quot;,"></outline>
				<outline text="&quot;mp3&quot;: &quot;audio/mpeg&quot;,"></outline>
				<outline text="&quot;pdf&quot;: &quot;application/pdf&quot;,"></outline>
				<outline text="&quot;png&quot;: &quot;image/png&quot;,"></outline>
				<outline text="&quot;ppt&quot;: &quot;application/mspowerpoint&quot;,"></outline>
				<outline text="&quot;ps&quot;: &quot;application/postscript&quot;,"></outline>
				<outline text="&quot;ra&quot;: &quot;audio/x-pn-realaudio&quot;,"></outline>
				<outline text="&quot;ram&quot;: &quot;audio/x-pn-realaudio&quot;,"></outline>
				<outline text="&quot;sit&quot;: &quot;application/x-stuffit&quot;,"></outline>
				<outline text="&quot;sys&quot;: &quot;application/octet-stream&quot;,"></outline>
				<outline text="&quot;tar&quot;: &quot;application/x-tar&quot;,"></outline>
				<outline text="&quot;text&quot;: &quot;text/plain&quot;,"></outline>
				<outline text="&quot;txt&quot;: &quot;text/plain&quot;,"></outline>
				<outline text="&quot;wav&quot;: &quot;audio/x-wav&quot;,"></outline>
				<outline text="&quot;wrl&quot;: &quot;x-world/x-vrml&quot;,"></outline>
				<outline text="&quot;xml&quot;: &quot;text/xml&quot;,"></outline>
				<outline text="&quot;zip&quot;: &quot;application/zip&quot;"></outline>
				<outline text="};"></outline>
				</outline>
			<outline created="Sat, 01 Mar 2014 00:00:55 GMT" pgfnum="38151" text="for (x in map) {">
				<outline text="if (stringLower (x) == lowerext) {">
					<outline text="return (map [x]);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline created="Sat, 01 Mar 2014 00:01:09 GMT" pgfnum="38152" text="}"></outline>
				</outline>
			<outline text="return (&quot;text/plain&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function kilobyteString (num) { //1/24/15 by DW">
			<outline text="num = Number (num) / 1024;"></outline>
			<outline text="return (num.toFixed (2) + &quot;K&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function megabyteString (num) { //1/24/15 by DW">
			<outline text="var onemeg = 1024 * 1024;"></outline>
			<outline text="if (num &lt;= onemeg) {">
				<outline text="return (kilobyteString (num));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="num = Number (num) / onemeg;"></outline>
			<outline text="return (num.toFixed (2) + &quot;MB&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function gigabyteString (num) { //1/24/15 by DW">
			<outline text="var onegig = 1024 * 1024 * 1024;"></outline>
			<outline text="if (num &lt;= onegig) {">
				<outline text="return (megabyteString (num));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="num = Number (num) / onegig;"></outline>
			<outline text="return (num.toFixed (2) + &quot;GB&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function dateToNumber (theDate) { //2/15/15 by DW">
			<outline text="return (Number (new Date (theDate)));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getFileModDate (f, callback) { //8/26/15 by DW">
			<outline isComment="true" text="Changes">
				<outline text="8/26/15; 3:55:37 PM by DW">
					<outline text="This was coming up a lot. "></outline>
					</outline>
				</outline>
			<outline text="fs.exists (f, function (flExists) {">
				<outline text="if (flExists) {">
					<outline text="fs.stat (f, function (err, stats) {">
						<outline text="if (err) {">
							<outline text="callback (undefined);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="callback (new Date (stats.mtime).toString ());"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		</body>
	</opml>
