<?xml encoding="ISO-8859-1" version="1.0"?>
<!-- OPML generated by OPML Editor v0.75 on 10/30/15; 12:27:55 PM -->
<opml version="2.0">
	<head>
		<title>riverbuilder.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="riverbuilder.js">
		<outline text=" "></outline>
		<outline text="var riverCache = new Object (), flUseRiverCache = false, flRunningOnServer = true;"></outline>
		<outline text=""></outline>
		<outline text="function clearBuildRiverCache () {">
			<outline text="riverCache = new Object ();"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getCalendarPath (theDay) {">
			<outline text="if (theDay == undefined) {">
				<outline text="theDay = dayRiverCovers;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s3CalendarDataFolder + utils.getDatePath (theDay, false) + &quot;.json&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function buildOneRiver (listname, flSave, flSkipDuplicateTitles, flAddJsonpWrapper) { ">
			<outline isComment="true" text="Changes">
				<outline text="6/7/15; 11:37:22 AM by DW">
					<outline text="Instead of setting whenLastUpdate to the time of the last update when we're building the river, set it to the time the story was added to the river. This gives a more accurate read in the river display. It didn't show up as a problem until we had a single-feed river, then it was clear that we were just repeating the time of the last update for the feed, throughout the river. "></outline>
					</outline>
				<outline text="6/6/14; 5:46:01 PM by DW">
					<outline text="When skipping duplicate titles, all but the first title-less item would be skipped. We now avoid skipping items without titles. "></outline>
					</outline>
				<outline text="5/29/14; 4:23:19 PM by DW">
					<outline text="New optional param, flAddJsonpWrapper. If true (the default) we create a wrapper so it can be accessed as a JSONP object."></outline>
					</outline>
				<outline text="5/29/14; 3:48:35 PM by DW">
					<outline text="New optional param, flSkipDuplicateTitles. If true (the default) we keep track of titles, and don't add two items with exactly the same title."></outline>
					</outline>
				<outline text="5/29/14; 11:18:30 AM by DW">
					<outline text="We now go back through past days to fill the river. Tricky because we do it all async. We're so macho. ;-)"></outline>
					</outline>
				<outline text="5/29/14; 10:34:16 AM by DW">
					<outline text="New optional param, flSave. If true (the default) we save the river to S3. Otherwise we display it on the console. Needed this for the testing shell, so it could share code with the real app. Makes it easier to test changes. "></outline>
					</outline>
				<outline text="5/28/14; 10:03:43 AM by DW">
					<outline text="Created. name is something like nba.opml or podcasts.opml."></outline>
					</outline>
				</outline>
			<outline text="var theRiver = new Object (), starttime = new Date (), ctitems = 0, flEndOfSource = false, titles = new Object (), ctDuplicatesSkipped = 0;"></outline>
			<outline text="if (flSave == undefined) {">
				<outline text="flSave = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flSkipDuplicateTitles == undefined) {">
				<outline text="flSkipDuplicateTitles = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flAddJsonpWrapper == undefined) {">
				<outline text="flAddJsonpWrapper = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="theRiver.updatedFeeds = new Object ();"></outline>
			<outline text="theRiver.updatedFeeds.updatedFeed = new Array ();"></outline>
			<outline text=""></outline>
			<outline text="function getRiverForDay (d, callback) {">
				<outline text="var s3path = getCalendarPath (d);"></outline>
				<outline text="if (flRunningOnServer) {">
					<outline text="stGetObject (s3path, function (error, data) {">
						<outline text="if (error) {">
							<outline text="callback (undefined);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438" text="var struct = parseJson (data.Body, s3path);"></outline>
							<outline text="callback (struct);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var url = &quot;http:/&quot; + s3path; "></outline>
					<outline text="readHttpFile (url, function (jsontext) {">
						<outline text="if (jsontext == undefined) {">
							<outline text="callback (undefined);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="var struct = parseJson (jsontext);"></outline>
							<outline text="callback (struct);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function finishBuild () {">
				<outline text="var jsontext;"></outline>
				<outline text="theRiver.metadata = {">
					<outline text="name: listname,"></outline>
					<outline text="docs: &quot;http://scripting.com/stories/2010/12/06/innovationRiverOfNewsInJso.html&quot;,"></outline>
					<outline text="secs: utils.secondsSince (starttime),"></outline>
					<outline text="ctDuplicatesSkipped: ctDuplicatesSkipped,"></outline>
					<outline text="whenGMT: starttime.toUTCString (),"></outline>
					<outline text="whenLocal: starttime.toLocaleString (),"></outline>
					<outline text="aggregator: myProductName + &quot; v&quot; + myVersion"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="jsontext = utils.jsonStringify (theRiver, true);"></outline>
				<outline text="if (flAddJsonpWrapper) {">
					<outline text="jsontext = &quot;onGetRiverStream (&quot; + jsontext + &quot;)&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (flSave) {">
					<outline text="var fname = utils.stringPopLastField (listname, &quot;.&quot;) + &quot;.js&quot;;"></outline>
					<outline text="stNewObject (s3UserRiversPath + fname, jsontext, &quot;application/json&quot;, s3defaultAcl, function (error, data) {">
						<outline text="console.log (&quot;buildOneRiver: &quot; + s3UserRiversPath + fname + &quot;.&quot;);"></outline>
						<outline text="serverData.stats.ctRiverJsonSaves++;"></outline>
						<outline text="serverData.stats.whenLastRiverJsonSave = starttime;"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="console.log (jsontext);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function doOneDay (theDay) {">
				<outline text="if (flEndOfSource) {">
					<outline text="finishBuild ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="getRiverForDay (theDay, function (theDaysRiver) {">
						<outline text="if (theDaysRiver == undefined) { //error reading the source file">
							<outline isComment="true" text="flEndOfSource = true;"></outline>
							<outline text="finishBuild ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="var lastfeedurl = undefined, theRiverFeed, flThisFeedInList;"></outline>
							<outline text="for (var i = theDaysRiver.length - 1; i &gt;= 0; i--) {">
								<outline text="var story = theDaysRiver [i], flskip = false, reducedtitle;"></outline>
								<outline text="if (flSkipDuplicateTitles) { //5/29/14 by DW">
									<outline text="reducedtitle = utils.trimWhitespace (utils.stringLower (story.title));"></outline>
									<outline text="if (reducedtitle.length &gt; 0) { //6/6/14 by DW">
										<outline text="if (titles [reducedtitle] != undefined) { //duplicate">
											<outline isComment="true" text="console.log (&quot;buildOneRiver: skipping \&quot;&quot; + story.title + &quot;\&quot;.&quot;);"></outline>
											<outline text="ctDuplicatesSkipped++;"></outline>
											<outline text="flskip = true;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="if (!flskip) {">
									<outline text="if (story.feedUrl != lastfeedurl) {">
										<outline text="var feedstats = findInFeedsArray (story.feedUrl);"></outline>
										<outline text="flThisFeedInList = false;"></outline>
										<outline text=""></outline>
										<outline text="if (feedstats !== undefined) { //10/30/15 by DW -- an item appears in a river but we're no longers subscribed to its feed">
											<outline text="for (var j = 0; j &lt; feedstats.lists.length; j++) {">
												<outline text="if (feedstats.lists [j] == listname) {">
													<outline text="flThisFeedInList = true;"></outline>
													<outline text="break;"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="}"></outline>
											</outline>
										<outline text=""></outline>
										<outline text="if (flThisFeedInList) {">
											<outline text="var ix = theRiver.updatedFeeds.updatedFeed.length;"></outline>
											<outline text="theRiver.updatedFeeds.updatedFeed [ix] = new Object ();"></outline>
											<outline text="theRiverFeed = theRiver.updatedFeeds.updatedFeed [ix];"></outline>
											<outline text=""></outline>
											<outline text="theRiverFeed.feedTitle = feedstats.title;"></outline>
											<outline text="theRiverFeed.feedUrl = story.feedUrl;"></outline>
											<outline text="theRiverFeed.websiteUrl = feedstats.htmlurl;"></outline>
											<outline text="//description">
												<outline text="if (feedstats.description == undefined) {">
													<outline text="theRiverFeed.feedDescription = &quot;&quot;;"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="theRiverFeed.feedDescription = feedstats.description;"></outline>
													<outline text="}"></outline>
													</outline>
												</outline>
											<outline text="//whenLastUpdate -- 6/7/15 by DW">
												<outline text="if (story.when !== undefined) {">
													<outline text="theRiverFeed.whenLastUpdate = new Date (story.when).toUTCString ();"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="theRiverFeed.whenLastUpdate = new Date (feedstats.whenLastNewItem).toUTCString ();"></outline>
													<outline text="}"></outline>
													</outline>
												<outline isComment="true" text="theRiverFeed.whenLastUpdate = new Date (feedstats.whenLastNewItem).toUTCString ();"></outline>
												</outline>
											<outline text="theRiverFeed.item = new Array ();"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text=""></outline>
										<outline text="lastfeedurl = story.feedUrl;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (flThisFeedInList) { //add an item to this set of updates to the feed">
										<outline text="var ix = theRiverFeed.item.length, theItem;"></outline>
										<outline text="theRiverFeed.item [ix] = new Object ();"></outline>
										<outline text="theItem = theRiverFeed.item [ix];"></outline>
										<outline text="theItem.title = story.title;"></outline>
										<outline text="theItem.link = story.link;"></outline>
										<outline text="theItem.body = story.description;"></outline>
										<outline text=""></outline>
										<outline text="if (story.outline != undefined) { //7/16/14 by DW">
											<outline text="theItem.outline = story.outline;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text=""></outline>
										<outline text="theItem.pubDate = new Date (story.pubdate).toUTCString ();"></outline>
										<outline text="theItem.permaLink = story.permalink;"></outline>
										<outline text="if (story.comments.length &gt; 0) { //6/7/14 by DW">
											<outline text="theItem.comments = story.comments;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="//enclosure -- 5/30/14 by DW">
											<outline text="if (story.enclosure != undefined) {">
												<outline text="var flgood = true;"></outline>
												<outline text=""></outline>
												<outline text="if ((story.enclosure.type == undefined) || (story.enclosure.length === undefined)) { //both are required">
													<outline text="flgood = false; //sorry! :-("></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="else {">
													<outline text="if (utils.stringCountFields (story.enclosure.type, &quot;/&quot;) &lt; 2) { //something like &quot;image&quot; -- not a valid type">
														<outline text="flgood = false; //we read the spec, did you? :-)"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="}"></outline>
													</outline>
												<outline text=""></outline>
												<outline text="if (flgood) {">
													<outline text="theItem.enclosure = [story.enclosure];"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											</outline>
										<outline text="//id">
											<outline text="if (story.id == undefined) {">
												<outline text="theItem.id = &quot;&quot;;"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="theItem.id = utils.padWithZeros (story.id, 7);"></outline>
												<outline text="}"></outline>
												</outline>
											</outline>
										<outline text="if (++ctitems &gt;= serverData.prefs.maxRiverItems) {">
											<outline text="flEndOfSource = true;"></outline>
											<outline text="break;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="if (flSkipDuplicateTitles) { //5/29/14 by DW -- add the title to the titles object">
											<outline text="titles [reducedtitle] = true;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="doOneDay (utils.dateYesterday (theDay));"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="doOneDay (starttime);"></outline>
			<outline text="}"></outline>
			</outline>
		</body>
	</opml>
